Resolved 55 packages in 2ms
Audited 45 packages in 0.05ms
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets ...
scons: `.' is up to date.
scons: done building targets.
All checks passed!
============================= test session starts ==============================
platform linux -- Python 3.12.0, pytest-8.3.4, pluggy-1.5.0
rootdir: /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo
configfile: pyproject.toml
testpaths: opendbc
plugins: hypothesis-6.47.5, mock-3.14.0, subtests-0.14.1, xdist-3.6.1
created: 8/8 workers
8 workers [1819 items]

..,...,.,...,,.,...,,.,.,,,......,,,,,,.,,,,,,,,,,.,,,.,,,.,,,,,,,,,,,,, [  1%]
.,,,.,,,,,,,,,,,,,.,,.,,,,,,,,,,,,,,..,,,,,,,,,,,,,.,,,.,,,,,,,,,,.,,,,, [  1%]
,.,,,,,,,.,,,,,,,,,.,,,,.,,,,,,,,,,,,..,,,,,,,,,,,,,,.,,.,,,,,,,,,.,,,,, [  2%]
,,.,,,.,,,,,,,,,,,,.,.,,,,,,,,,,,.,,,,,.,,,,.,,,,,,,,,,,,..,,,,,,,,,,.., [  3%]
,,,,,..,,,,,,,...,,,.,,,,,,.......,,..,,,..........,,,,,,,,,,,..,,,,,,,, [  4%]
,,,,.,,,,.,,,,,.,,,,,,,,,,,.,,.,,,,,,,,,..F,,,,,.,,,,,,,,,,,F,,F,F.,,.,, [  5%]
,,,,,,,,,,.F,,,,.,,,,,,,,.,,,,,,,,.,,,.,,,,,,,,,,.,,,...,,.,,,,,,,..,,,, [  5%]
,,,,,,,FF.F,.F,,,,..,,,,F.,,,,,,,,F.,,,,,,,.,,,,,.,,,,,F....,,,,,,,,.,,, [  7%]
,,,,,F,,,F,.,,,,,,,,,,,,,,,,,,,,,.F,,,,,,,,,F,,,,,,,,,,.,,,,,,,,.,,,,,,, [  7%]
,,,,,,,F.-,,,,,,,,,,,,,,,.,,,.,,,,,,,,,,,,,,,,,,,.,,,,,,,,,..,,,,,,,,.,, [  8%]
,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,F,,F,.,,,,,,,,,,,,,,,,,,, [  8%]
,,.,.,,F,,,,F,,,,,,,.,,,,,,,,,,,,,,,,.,,,,F.,,,,,,,,,,,.,,,,,,,..,,,,.,. [  8%]
......FF.E...F..E...F.........s....E....,.,,,,,,,,,,..,,,,,,,,,,,.,,,,,F [ 11%]
,,,.F,,,,,,,,,,.,,,,,,,,,,E,...,,,,,,F,,,,,,,..,,,.E,,,,,,..,,,,,,,,,,,, [ 12%]
,,,,,..,,,,,.F,,,,,,.,,,,,,,,E.,,,,,.,,,,.,,,..,,,,,,,,,.,,,,.,,..-,,,,, [ 12%]
,,,,,.F,.F,,,,,.,,,,,..,,,,,,...,,,,,,,,,,,,,,.,,,F,,..,,,,,,,,,.,.,.,,, [ 13%]
,,,,........F.........F..F..........F..........................F........ [ 17%]
......F.F.......F...............F................F.F..........F......... [ 21%]
....F............F...F.....F..................F............F...F....F... [ 25%]
.............F.....................F....F......F................F....... [ 29%]
......F..F.....ssssssssFs.s...........ssss.sss.sssssssssssssss.......... [ 33%]
......F.F.F...F.................F..........F...F..F....sssssssssss.ss.ss [ 37%]
ss...........F...........FF...F..................F...sssssssss...s...... [ 41%]
..F...FF.......sssssssss......s......ss.ss.ss.ss....ssssssssssssss...Fss [ 45%]
...............F..s..sFs.s.s.F.ss....ssss...ss...........s...s........F. [ 49%]
.........................F.........F.......................F............ [ 53%]
.F...............EF....F..F..,,,,,,.,,,,,,.,E,,,,,,,,.ss,,,,,,,,,,,,.,F, [ 55%]
,,,,,,,,,..,,,,,.,,E,,,,.,,,,,,,,.,,,,,,,,,.,,,,,,,,,,,,,,,,,FE,,,,,,,,, [ 55%]
,,,,,,,,,,,,F,,,,E,,,,,,,F,,,,,,,,,,,E,,,,,,,,,,,,,,,,,,,,,,,,,,E,,,,,,, [ 56%]
,,,F,,,E,,,,,,,,,,,,,,EE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,EF,,,,,,,,,,,,,,,, [ 56%]
,,EF,,,,,,,,,,,,,,EF,,,E,,,,,,,,,,,,,,,,,,,,,,,,,,E,,,,,,E,,,,,,,,,,,,,F [ 56%]
,,,,,,,,,,,,,,,,E,,,,,E,,,,,,,,,,,,E,,,,,,,,,,,,,,,,,F,,,,,,,,,,EE,,,,,, [ 57%]
,E,,F,,,,,,,,,,,,,,,,,,F,,,E,,,,,,,,,,,EE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, [ 57%]
,F,,E,,,,,,,,,,,,,,,,E,,,,,,,,,,,,E,,,,,,,,,,,,,,,,,,E,,E,,,,,,,,,,,,,,, [ 57%]
,,,,E,,,,,,,,F,E,,,,,,,,FE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,E,,,,,,,FE,,, [ 58%]
,E,,,,,,,,,,,,,,,,,EE,,,,,,,,,,,,,,,,,,,,,,F,,,,,,,E,,,,,,,,,E,,,EF,,,,, [ 58%]
,,,,,,F,,,,,,,,,,,,,,,,,,EFE,,,,,,,,,E,,,,,,,,,,,,,,,E,,,,,,,,,,,,,,,,,, [ 59%]
E,,,,,,,,,,E,,,,,,,,F,,,,,,,,,E,,,,,,,,,,,,E,,,,,,,,,,E,,,,,,,EF,,,,,,,, [ 59%]
,F,,,,,,,,,,,,,,,,,,,,EF,,,,,,E,,,,,,,,,,,,,E,,,,,,,,,,,,,,,,E,,,,,,,,,, [ 59%]
,,,E,,,,,,,E,,,,,,,F,,,,,,,,,,,,,,,E,,,,,,,,,,,,,,,,EE,,,,,,,,,,,F,,,,,F [ 60%]
,,,,,,,,,,,,,,E,,,,,,,,,,,EF,,,,,,,,,,,E,,,,,,,,,,,,,,,,,,,,,,EE,,,,,,,, [ 60%]
,EF,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,EE,,,,,,,,,,,,,E,,,,,,,,,F,,,,, [ 60%]
,,F,,,,,,,,,,,,,,E,,,E,,,EF,,,,,,,,,,,,,,,,,,,,,,,,,,,,E,,,,,,,,,E,,,,EF [ 61%]
,,,,..,,,,,,,,,,,,,,,,,E,,,,,,,E,,,,E,,,,,,,,,,,,,,,F,,,,,,,,,,,,,FE,,,, [ 61%]
,,,,,E,,,,,,,,,,,E,,,,,,,,,,,,FE,,,,,,,,,,,,,,,,,E,,,,,,,E,,,,,,,,,,,,,, [ 62%]
,,,,,,,E,F,,,,,,,E,,,,,,,,,,,,,,,,,E,,,,,,,,,,,E,,,,,,,F,,F,,,,,EE,,,,,, [ 62%]
,,,,,,,,,.EFEEEFEEEFFEEEFEEEFEEEFEEEFuFEEEuEFEEuEFEFEuFEEEEFEuEEFFEuEEFu [ 65%]
EEuFEEEFEuFEEuEEFEuEEFEEEFFuEEuEFEEuEFEuEEEEFuFEEEuFEEEuEEFuFFEEEuEFEEuE [ 68%]
EEFuFEEFEuEFEEuEEEFuFEEFEuEEEFuEEEFuEEFFEuEEEFuEEEuFEEFFEuEEEFuEEEuFEEEF [ 72%]
FuEEEFuEEEFuEEEFFuEEEFuEEEuEFEEFFuEEEEFuEEuEEEFFEFuEEEEuFEEEEuEEEEFuFEEE [ 75%]
EuEFEEEEEEEuFFEEuEEFEEuEEEEEuEEEEuEFEFEEuEFEEuEEEEuEFEFEEuEFEEEEuEEEEuFE [ 78%]
FEEEuEFEEEuEEEEuEFEEFEEEFuEEEuEEEEuEEFEFEuEEFEEuEEEEuEEFEFEuEEEFEEuEEEuE [ 82%]
EEFEEuFEEEF....E...EE,,,,,E....u,,,,,,,,...E...,,,,,,,,.E...,,,,,,,..... [ 84%]
,,,,,,.,,,,E....Eu,,,,,,....E,,,,,,,,,E,.....,,,,,,,.....E.,,,,,.,,,,,,, [ 85%]
,......,,,,E.....uE.....E..,,,,,,,,,,,,,,.....E,,,,,,,,,,,,.......EE,,,, [ 87%]
,..,,,,,,,....,,.,u,,E...E.,,,.,,,,,,....,,,...E.,,,,,,.,.E,,,,...,,,,.. [ 89%]
,,.,,,,,E,...,,,,.,,.,,,EEu,,...,,,,,,.,,,,,...,E,E.,,,,...,,,....,,,,,, [ 90%]
.,,,E,...,,....,,,,,E,,,E,.u,...,,..E.,,,,,,.,....E,.................... [ 93%]
...E.....E.E...u........E........E.............E.....E..E.....u...E.,,,, [ 97%]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,E,,,,.,E,,,E,,E,,,,,,,,,,,,,E,,,,,,,,u, [ 97%]
,,,,,,,,,,,,,,.,.,,,,,,,,,,,,,,,,,,,,,,,,,,,EE,,,,,,E.,,E,,,,,,,,.,,,,,, [ 97%]
,,,,,u,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,.,,,,,,,,,,E,,,,,,,E,,,,,,,,u,,,,,,. [ 98%]
,,,,,,,,,,.,Eu,Euu.,,,,,,,,,,,,,,u,,,,,,,,,,,,,,.uu,u,u,u,u,,u,u,u,u,uu, [ 98%]
u,u,u,u,uu,u,u,,u,u,u,uu,.uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu [ 98%]
uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu.,,,,,,,,,,,,,..,,,,,,,,,,,,,.,, [ 98%]
,,,,,,,,,,,..,,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,.EEEEEEEEEEEEE [ 99%]
EEEEEEEEE                                                                [100%]
==================================== ERRORS ====================================
______________ ERROR at setup of TestCarDocs.test_duplicate_years ______________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_docs.TestCarDocs'>

    @classmethod
    def setup_class(cls):
>     cls.all_cars = get_all_car_docs()

opendbc/car/tests/test_docs.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/docs.py:68: in get_all_car_docs
    sorted_list: list[CarDocs] = build_sorted_car_docs_list(PLATFORMS, footnotes=collected_footnotes)
opendbc/car/docs.py:48: in build_sorted_car_docs_list
    CP = get_params_for_docs(model, platform)
opendbc/car/docs.py:31: in get_params_for_docs
    CP: CarParams = interfaces[cp_model][0].get_params(cp_platform, fingerprint=gen_empty_fingerprint(),
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1adb28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a35c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____________ ERROR at setup of TestCarDocs.test_missing_car_docs ______________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_docs.TestCarDocs'>

    @classmethod
    def setup_class(cls):
>     cls.all_cars = get_all_car_docs()

opendbc/car/tests/test_docs.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/docs.py:68: in get_all_car_docs
    sorted_list: list[CarDocs] = build_sorted_car_docs_list(PLATFORMS, footnotes=collected_footnotes)
opendbc/car/docs.py:48: in build_sorted_car_docs_list
    CP = get_params_for_docs(model, platform)
opendbc/car/docs.py:31: in get_params_for_docs
    CP: CarParams = interfaces[cp_model][0].get_params(cp_platform, fingerprint=gen_empty_fingerprint(),
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1adb28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a35c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____________ ERROR at setup of TestCarDocs.test_naming_conventions _____________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_docs.TestCarDocs'>

    @classmethod
    def setup_class(cls):
>     cls.all_cars = get_all_car_docs()

opendbc/car/tests/test_docs.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/docs.py:68: in get_all_car_docs
    sorted_list: list[CarDocs] = build_sorted_car_docs_list(PLATFORMS, footnotes=collected_footnotes)
opendbc/car/docs.py:48: in build_sorted_car_docs_list
    CP = get_params_for_docs(model, platform)
opendbc/car/docs.py:31: in get_params_for_docs
    CP: CarParams = interfaces[cp_model][0].get_params(cp_platform, fingerprint=gen_empty_fingerprint(),
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1adb28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a35c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
________________ ERROR at setup of TestCarDocs.test_torque_star ________________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_docs.TestCarDocs'>

    @classmethod
    def setup_class(cls):
>     cls.all_cars = get_all_car_docs()

opendbc/car/tests/test_docs.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/docs.py:68: in get_all_car_docs
    sorted_list: list[CarDocs] = build_sorted_car_docs_list(PLATFORMS, footnotes=collected_footnotes)
opendbc/car/docs.py:48: in build_sorted_car_docs_list
    CP = get_params_for_docs(model, platform)
opendbc/car/docs.py:31: in get_params_for_docs
    CP: CarParams = interfaces[cp_model][0].get_params(cp_platform, fingerprint=gen_empty_fingerprint(),
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1adb28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a35c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
________________ ERROR at setup of TestCarDocs.test_year_format ________________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_docs.TestCarDocs'>

    @classmethod
    def setup_class(cls):
>     cls.all_cars = get_all_car_docs()

opendbc/car/tests/test_docs.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/docs.py:68: in get_all_car_docs
    sorted_list: list[CarDocs] = build_sorted_car_docs_list(PLATFORMS, footnotes=collected_footnotes)
opendbc/car/docs.py:48: in build_sorted_car_docs_list
    CP = get_params_for_docs(model, platform)
opendbc/car/docs.py:31: in get_params_for_docs
    CP: CarParams = interfaces[cp_model][0].get_params(cp_platform, fingerprint=gen_empty_fingerprint(),
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1adb28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a35c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_________________ ERROR at setup of TestCarDocs.test_harnesses _________________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_docs.TestCarDocs'>

    @classmethod
    def setup_class(cls):
>     cls.all_cars = get_all_car_docs()

opendbc/car/tests/test_docs.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/docs.py:68: in get_all_car_docs
    sorted_list: list[CarDocs] = build_sorted_car_docs_list(PLATFORMS, footnotes=collected_footnotes)
opendbc/car/docs.py:48: in build_sorted_car_docs_list
    CP = get_params_for_docs(model, platform)
opendbc/car/docs.py:31: in get_params_for_docs
    CP: CarParams = interfaces[cp_model][0].get_params(cp_platform, fingerprint=gen_empty_fingerprint(),
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1adb28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a35c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_1_ACURA_RDX.test_jerk_limits _______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_1_ACURA_RDX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0a3050>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a1e80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_1_ACURA_RDX.test_max_lateral_accel ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_1_ACURA_RDX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0a3050>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a1e80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_2_ACURA_RDX_3G.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_2_ACURA_RDX_3G'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e4a8a70>, flags=<tomllib._parser.Flags object at 0x7f3f1e4a8e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_2_ACURA_RDX_3G.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_2_ACURA_RDX_3G'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e4a8a70>, flags=<tomllib._parser.Flags object at 0x7f3f1e4a8e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_22_CHRYSLER_PACIFICA_2018_HYBRID.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_22_CHRYSLER_PACIFICA_2018_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e923260>, flags=<tomllib._parser.Flags object at 0x7f2a1e923230>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_3_AUDI_A3_MK3.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_3_AUDI_A3_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0dec90>, flags=<tomllib._parser.Flags object at 0x7f3f1e0de9f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_23_CHRYSLER_PACIFICA_2019_HYBRID.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_23_CHRYSLER_PACIFICA_2019_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9210a0>, flags=<tomllib._parser.Flags object at 0x7f2a1e9237a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_3_AUDI_A3_MK3.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_3_AUDI_A3_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0dec90>, flags=<tomllib._parser.Flags object at 0x7f3f1e0de9f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_12_CADILLAC_ESCALADE_ESV_2019.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_12_CADILLAC_ESCALADE_ESV_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a61ac4d0>, flags=<tomllib._parser.Flags object at 0x7fe5a61ac380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_23_CHRYSLER_PACIFICA_2019_HYBRID.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_23_CHRYSLER_PACIFICA_2019_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9210a0>, flags=<tomllib._parser.Flags object at 0x7f2a1e9237a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_4_AUDI_Q2_MK1.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_4_AUDI_Q2_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e3a8950>, flags=<tomllib._parser.Flags object at 0x7f3f1e3ab9e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_12_CADILLAC_ESCALADE_ESV_2019.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_12_CADILLAC_ESCALADE_ESV_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a61ac4d0>, flags=<tomllib._parser.Flags object at 0x7fe5a61ac380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_24_CHRYSLER_PACIFICA_2020.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_24_CHRYSLER_PACIFICA_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e920680>, flags=<tomllib._parser.Flags object at 0x7f2a1e9232f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_4_AUDI_Q2_MK1.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_4_AUDI_Q2_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e3a8950>, flags=<tomllib._parser.Flags object at 0x7f3f1e3ab9e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_13_CADILLAC_XT4.test_jerk_limits _____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_13_CADILLAC_XT4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd3110>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd2810>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_24_CHRYSLER_PACIFICA_2020.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_24_CHRYSLER_PACIFICA_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e920680>, flags=<tomllib._parser.Flags object at 0x7f2a1e9232f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_13_CADILLAC_XT4.test_max_lateral_accel __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_13_CADILLAC_XT4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd3110>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd2810>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_5_AUDI_Q3_MK2.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_5_AUDI_Q3_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e058800>, flags=<tomllib._parser.Flags object at 0x7f3f1e059fa0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_25_COMMA_BODY.test_jerk_limits ______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_25_COMMA_BODY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e935f10>, flags=<tomllib._parser.Flags object at 0x7f2a1e9349e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_14_CHEVROLET_BOLT_EUV.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_14_CHEVROLET_BOLT_EUV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd10d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd3e00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_5_AUDI_Q3_MK2.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_5_AUDI_Q3_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e058800>, flags=<tomllib._parser.Flags object at 0x7f3f1e059fa0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_25_COMMA_BODY.test_max_lateral_accel ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_25_COMMA_BODY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e935f10>, flags=<tomllib._parser.Flags object at 0x7f2a1e9349e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_14_CHEVROLET_BOLT_EUV.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_14_CHEVROLET_BOLT_EUV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd10d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd3e00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_6_BUICK_LACROSSE.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_6_BUICK_LACROSSE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e65e840>, flags=<tomllib._parser.Flags object at 0x7f3f1e65e3c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_26_DODGE_DURANGO.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_26_DODGE_DURANGO'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907a40>, flags=<tomllib._parser.Flags object at 0x7f2a1e905250>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_6_BUICK_LACROSSE.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_6_BUICK_LACROSSE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e65e840>, flags=<tomllib._parser.Flags object at 0x7f3f1e65e3c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_26_DODGE_DURANGO.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_26_DODGE_DURANGO'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907a40>, flags=<tomllib._parser.Flags object at 0x7f2a1e905250>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_15_CHEVROLET_EQUINOX.test_jerk_limits ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_15_CHEVROLET_EQUINOX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd3a40>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd3830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_7_BUICK_REGAL.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_7_BUICK_REGAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e3a81d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e3a8ec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_27_FORD_BRONCO_SPORT_MK1.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_27_FORD_BRONCO_SPORT_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f056b40>, flags=<tomllib._parser.Flags object at 0x7f2a1f0566c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_15_CHEVROLET_EQUINOX.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_15_CHEVROLET_EQUINOX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd3a40>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd3830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_7_BUICK_REGAL.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_7_BUICK_REGAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e3a81d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e3a8ec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_27_FORD_BRONCO_SPORT_MK1.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_27_FORD_BRONCO_SPORT_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f056b40>, flags=<tomllib._parser.Flags object at 0x7f2a1f0566c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_8_BYD_ATTO3.test_jerk_limits _______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_8_BYD_ATTO3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0df470>, flags=<tomllib._parser.Flags object at 0x7f3f1e0df770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_16_CHEVROLET_MALIBU.test_jerk_limits ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_16_CHEVROLET_MALIBU'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5ed0aa0>, flags=<tomllib._parser.Flags object at 0x7fe5a5ed0d70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_28_FORD_ESCAPE_MK4.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_28_FORD_ESCAPE_MK4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e987cb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e986e40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_8_BYD_ATTO3.test_max_lateral_accel ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_8_BYD_ATTO3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0df470>, flags=<tomllib._parser.Flags object at 0x7f3f1e0df770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_16_CHEVROLET_MALIBU.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_16_CHEVROLET_MALIBU'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5ed0aa0>, flags=<tomllib._parser.Flags object at 0x7fe5a5ed0d70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_28_FORD_ESCAPE_MK4.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_28_FORD_ESCAPE_MK4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e987cb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e986e40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_9_CADILLAC_ATS.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_9_CADILLAC_ATS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c8500>, flags=<tomllib._parser.Flags object at 0x7f3f1e0c83b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_17_CHEVROLET_SILVERADO.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_17_CHEVROLET_SILVERADO'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c0a330>, flags=<tomllib._parser.Flags object at 0x7fe5a5c09850>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_29_FORD_EXPLORER_MK6.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_29_FORD_EXPLORER_MK6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e906030>, flags=<tomllib._parser.Flags object at 0x7f2a1e905820>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_9_CADILLAC_ATS.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_9_CADILLAC_ATS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c8500>, flags=<tomllib._parser.Flags object at 0x7f3f1e0c83b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_17_CHEVROLET_SILVERADO.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_17_CHEVROLET_SILVERADO'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c0a330>, flags=<tomllib._parser.Flags object at 0x7fe5a5c09850>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_29_FORD_EXPLORER_MK6.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_29_FORD_EXPLORER_MK6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e906030>, flags=<tomllib._parser.Flags object at 0x7f2a1e905820>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_10_CADILLAC_ESCALADE.test_jerk_limits ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_10_CADILLAC_ESCALADE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0deed0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0dfad0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_18_CHEVROLET_TRAVERSE.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_18_CHEVROLET_TRAVERSE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5ed0710>, flags=<tomllib._parser.Flags object at 0x7fe5a5ed1b50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_30_FORD_FOCUS_MK4.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_30_FORD_FOCUS_MK4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb1e3f0>, flags=<tomllib._parser.Flags object at 0x7f2a1eb1d0d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_10_CADILLAC_ESCALADE.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_10_CADILLAC_ESCALADE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0deed0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0dfad0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_18_CHEVROLET_TRAVERSE.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_18_CHEVROLET_TRAVERSE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5ed0710>, flags=<tomllib._parser.Flags object at 0x7fe5a5ed1b50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_30_FORD_FOCUS_MK4.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_30_FORD_FOCUS_MK4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb1e3f0>, flags=<tomllib._parser.Flags object at 0x7f2a1eb1d0d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_11_CADILLAC_ESCALADE_ESV.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_11_CADILLAC_ESCALADE_ESV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f363c74a0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cb260>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_19_CHEVROLET_VOLT.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_19_CHEVROLET_VOLT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb84a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cb83b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_31_FORD_F_150_LIGHTNING_MK1.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_31_FORD_F_150_LIGHTNING_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907260>, flags=<tomllib._parser.Flags object at 0x7f2a1e907b00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_11_CADILLAC_ESCALADE_ESV.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_11_CADILLAC_ESCALADE_ESV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f363c74a0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cb260>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_19_CHEVROLET_VOLT.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_19_CHEVROLET_VOLT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb84a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cb83b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_31_FORD_F_150_LIGHTNING_MK1.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_31_FORD_F_150_LIGHTNING_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907260>, flags=<tomllib._parser.Flags object at 0x7f2a1e907b00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_42_GENESIS_GV70_1ST_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_42_GENESIS_GV70_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c99d0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0c92b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_20_CHEVROLET_VOLT_2019.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_20_CHEVROLET_VOLT_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cba7e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cba240>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_32_FORD_F_150_MK14.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_32_FORD_F_150_MK14'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eef1820>, flags=<tomllib._parser.Flags object at 0x7f2a1eef2990>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_43_GENESIS_GV70_ELECTRIFIED_1ST_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_43_GENESIS_GV70_ELECTRIFIED_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e077cb0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0775c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_20_CHEVROLET_VOLT_2019.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_20_CHEVROLET_VOLT_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cba7e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cba240>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_52_HONDA_CIVIC_BOSCH_DIESEL.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_52_HONDA_CIVIC_BOSCH_DIESEL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a9eb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e9aaae0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_43_GENESIS_GV70_ELECTRIFIED_1ST_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_43_GENESIS_GV70_ELECTRIFIED_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e077cb0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0775c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_21_CHRYSLER_PACIFICA_2018.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_21_CHRYSLER_PACIFICA_2018'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cbb2f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cbb0b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_52_HONDA_CIVIC_BOSCH_DIESEL.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_52_HONDA_CIVIC_BOSCH_DIESEL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a9eb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e9aaae0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_21_CHRYSLER_PACIFICA_2018.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_21_CHRYSLER_PACIFICA_2018'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cbb2f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cbb0b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_44_GENESIS_GV80.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_44_GENESIS_GV80'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c9f70>, flags=<tomllib._parser.Flags object at 0x7f3f1e0ca090>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_53_HONDA_CRV.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_53_HONDA_CRV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eef1220>, flags=<tomllib._parser.Flags object at 0x7f2a1eef03e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_44_GENESIS_GV80.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_44_GENESIS_GV80'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c9f70>, flags=<tomllib._parser.Flags object at 0x7f3f1e0ca090>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_22_CHRYSLER_PACIFICA_2018_HYBRID.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_22_CHRYSLER_PACIFICA_2018_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb9c10>, flags=<tomllib._parser.Flags object at 0x7fe5a5cb99d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_53_HONDA_CRV.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_53_HONDA_CRV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eef1220>, flags=<tomllib._parser.Flags object at 0x7f2a1eef03e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_45_GMC_ACADIA.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_45_GMC_ACADIA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e087ce0>, flags=<tomllib._parser.Flags object at 0x7f3f1e085010>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_61_HONDA_HRV_3G.test_max_lateral_accel __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_61_HONDA_HRV_3G'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cefb90>, flags=<tomllib._parser.Flags object at 0x7fe5a5cef770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_54_HONDA_CRV_5G.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_54_HONDA_CRV_5G'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeb22d0>, flags=<tomllib._parser.Flags object at 0x7f2a1eeb1d30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_45_GMC_ACADIA.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_45_GMC_ACADIA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e087ce0>, flags=<tomllib._parser.Flags object at 0x7f3f1e085010>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_62_HONDA_INSIGHT.test_jerk_limits _____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_62_HONDA_INSIGHT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cefe30>, flags=<tomllib._parser.Flags object at 0x7fe5a5cef980>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_54_HONDA_CRV_5G.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_54_HONDA_CRV_5G'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeb22d0>, flags=<tomllib._parser.Flags object at 0x7f2a1eeb1d30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_46_GMC_YUKON.test_jerk_limits _______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_46_GMC_YUKON'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e075340>, flags=<tomllib._parser.Flags object at 0x7f3f1e077ec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_62_HONDA_INSIGHT.test_max_lateral_accel __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_62_HONDA_INSIGHT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cefe30>, flags=<tomllib._parser.Flags object at 0x7fe5a5cef980>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_55_HONDA_CRV_EU.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_55_HONDA_CRV_EU'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a9190>, flags=<tomllib._parser.Flags object at 0x7f2a1e9aa780>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_46_GMC_YUKON.test_max_lateral_accel ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_46_GMC_YUKON'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e075340>, flags=<tomllib._parser.Flags object at 0x7f3f1e077ec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_63_HONDA_ODYSSEY.test_jerk_limits _____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_63_HONDA_ODYSSEY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cbab70>, flags=<tomllib._parser.Flags object at 0x7fe5a5cba060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_55_HONDA_CRV_EU.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_55_HONDA_CRV_EU'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a9190>, flags=<tomllib._parser.Flags object at 0x7f2a1e9aa780>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_47_HOLDEN_ASTRA.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_47_HOLDEN_ASTRA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfc9460>, flags=<tomllib._parser.Flags object at 0x7f3f1dfcb6b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_63_HONDA_ODYSSEY.test_max_lateral_accel __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_63_HONDA_ODYSSEY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cbab70>, flags=<tomllib._parser.Flags object at 0x7fe5a5cba060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_56_HONDA_CRV_HYBRID.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_56_HONDA_CRV_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9aaf30>, flags=<tomllib._parser.Flags object at 0x7f2a1e9a9a00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_47_HOLDEN_ASTRA.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_47_HOLDEN_ASTRA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfc9460>, flags=<tomllib._parser.Flags object at 0x7f3f1dfcb6b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_56_HONDA_CRV_HYBRID.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_56_HONDA_CRV_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9aaf30>, flags=<tomllib._parser.Flags object at 0x7f2a1e9a9a00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_64_HONDA_ODYSSEY_CHN.test_jerk_limits ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_64_HONDA_ODYSSEY_CHN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c547d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c560c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_48_HONDA_ACCORD.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_48_HONDA_ACCORD'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e087f50>, flags=<tomllib._parser.Flags object at 0x7f3f1e0874d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_64_HONDA_ODYSSEY_CHN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_64_HONDA_ODYSSEY_CHN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c547d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c560c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_57_HONDA_E.test_jerk_limits ________
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_57_HONDA_E'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f11fa40>, flags=<tomllib._parser.Flags object at 0x7f2a1f11f740>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_48_HONDA_ACCORD.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_48_HONDA_ACCORD'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e087f50>, flags=<tomllib._parser.Flags object at 0x7f3f1e0874d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_57_HONDA_E.test_max_lateral_accel _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_57_HONDA_E'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f11fa40>, flags=<tomllib._parser.Flags object at 0x7f2a1f11f740>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_65_HONDA_PILOT.test_jerk_limits ______
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_65_HONDA_PILOT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cba750>, flags=<tomllib._parser.Flags object at 0x7fe5a5c567b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_49_HONDA_CIVIC.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_49_HONDA_CIVIC'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df74f20>, flags=<tomllib._parser.Flags object at 0x7f3f1df76cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_65_HONDA_PILOT.test_max_lateral_accel ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_65_HONDA_PILOT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cba750>, flags=<tomllib._parser.Flags object at 0x7fe5a5c567b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_58_HONDA_FIT.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_58_HONDA_FIT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a9520>, flags=<tomllib._parser.Flags object at 0x7f2a1e9a8620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_49_HONDA_CIVIC.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_49_HONDA_CIVIC'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df74f20>, flags=<tomllib._parser.Flags object at 0x7f3f1df76cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_66_HONDA_RIDGELINE.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_66_HONDA_RIDGELINE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c53ad0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c531d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_58_HONDA_FIT.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_58_HONDA_FIT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a9520>, flags=<tomllib._parser.Flags object at 0x7f2a1e9a8620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_50_HONDA_CIVIC_2022.test_jerk_limits ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_50_HONDA_CIVIC_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df75c40>, flags=<tomllib._parser.Flags object at 0x7f3f1df77b90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_66_HONDA_RIDGELINE.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_66_HONDA_RIDGELINE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c53ad0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c531d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_59_HONDA_FREED.test_jerk_limits ______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_59_HONDA_FREED'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee8be60>, flags=<tomllib._parser.Flags object at 0x7f2a1ee8ac60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_50_HONDA_CIVIC_2022.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_50_HONDA_CIVIC_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df75c40>, flags=<tomllib._parser.Flags object at 0x7f3f1df77b90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_59_HONDA_FREED.test_max_lateral_accel ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_59_HONDA_FREED'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee8be60>, flags=<tomllib._parser.Flags object at 0x7f2a1ee8ac60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_67_HYUNDAI_AZERA_6TH_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_67_HYUNDAI_AZERA_6TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c57170>, flags=<tomllib._parser.Flags object at 0x7fe5a5c56360>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_51_HONDA_CIVIC_BOSCH.test_jerk_limits ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_51_HONDA_CIVIC_BOSCH'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df74a40>, flags=<tomllib._parser.Flags object at 0x7f3f1df77e60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_60_HONDA_HRV.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_60_HONDA_HRV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee88320>, flags=<tomllib._parser.Flags object at 0x7f2a1ee886b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_67_HYUNDAI_AZERA_6TH_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_67_HYUNDAI_AZERA_6TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c57170>, flags=<tomllib._parser.Flags object at 0x7fe5a5c56360>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_51_HONDA_CIVIC_BOSCH.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_51_HONDA_CIVIC_BOSCH'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df74a40>, flags=<tomllib._parser.Flags object at 0x7f3f1df77e60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_60_HONDA_HRV.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_60_HONDA_HRV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee88320>, flags=<tomllib._parser.Flags object at 0x7f2a1ee886b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_68_HYUNDAI_AZERA_HEV_6TH_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_68_HYUNDAI_AZERA_HEV_6TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc5700>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc7380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_70_HYUNDAI_ELANTRA.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_70_HYUNDAI_ELANTRA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfa3890>, flags=<tomllib._parser.Flags object at 0x7f3f1dfa2cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_61_HONDA_HRV_3G.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_61_HONDA_HRV_3G'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eaa1700>, flags=<tomllib._parser.Flags object at 0x7f2a1eaa3e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_68_HYUNDAI_AZERA_HEV_6TH_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_68_HYUNDAI_AZERA_HEV_6TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc5700>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc7380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_71_HYUNDAI_ELANTRA_2021.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_71_HYUNDAI_ELANTRA_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df75f40>, flags=<tomllib._parser.Flags object at 0x7f3f1df776b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_79_HYUNDAI_IONIQ_EV_LTD.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_79_HYUNDAI_IONIQ_EV_LTD'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee69070>, flags=<tomllib._parser.Flags object at 0x7f2a1ee69ca0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_69_HYUNDAI_CUSTIN_1ST_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_69_HYUNDAI_CUSTIN_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c567b0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c575f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_71_HYUNDAI_ELANTRA_2021.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_71_HYUNDAI_ELANTRA_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df75f40>, flags=<tomllib._parser.Flags object at 0x7f3f1df776b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_79_HYUNDAI_IONIQ_EV_LTD.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_79_HYUNDAI_IONIQ_EV_LTD'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee69070>, flags=<tomllib._parser.Flags object at 0x7f2a1ee69ca0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_69_HYUNDAI_CUSTIN_1ST_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_69_HYUNDAI_CUSTIN_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c567b0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c575f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_72_HYUNDAI_ELANTRA_GT_I30.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_72_HYUNDAI_ELANTRA_GT_I30'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe1040>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe2ff0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_70_HYUNDAI_ELANTRA.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_70_HYUNDAI_ELANTRA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b56cc0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b56810>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_72_HYUNDAI_ELANTRA_GT_I30.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_72_HYUNDAI_ELANTRA_GT_I30'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe1040>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe2ff0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_80_HYUNDAI_IONIQ_HEV_2022.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_80_HYUNDAI_IONIQ_HEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f3c4c20>, flags=<tomllib._parser.Flags object at 0x7f2a1f3c5b80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_87_HYUNDAI_KONA_HEV.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_87_HYUNDAI_KONA_HEV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc6ea0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc5670>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_73_HYUNDAI_ELANTRA_HEV_2021.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_73_HYUNDAI_ELANTRA_HEV_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df768a0>, flags=<tomllib._parser.Flags object at 0x7f3f1df76600>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_80_HYUNDAI_IONIQ_HEV_2022.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_80_HYUNDAI_IONIQ_HEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f3c4c20>, flags=<tomllib._parser.Flags object at 0x7f2a1f3c5b80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_88_HYUNDAI_PALISADE.test_jerk_limits ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_88_HYUNDAI_PALISADE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b570b0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b56390>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_73_HYUNDAI_ELANTRA_HEV_2021.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_73_HYUNDAI_ELANTRA_HEV_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df768a0>, flags=<tomllib._parser.Flags object at 0x7f3f1df76600>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_81_HYUNDAI_IONIQ_PHEV.test_jerk_limits __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_81_HYUNDAI_IONIQ_PHEV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f331b50>, flags=<tomllib._parser.Flags object at 0x7f2a1f333fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_88_HYUNDAI_PALISADE.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_88_HYUNDAI_PALISADE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b570b0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b56390>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_81_HYUNDAI_IONIQ_PHEV.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_81_HYUNDAI_IONIQ_PHEV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f331b50>, flags=<tomllib._parser.Flags object at 0x7f2a1f333fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_74_HYUNDAI_GENESIS.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_74_HYUNDAI_GENESIS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe20c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_74_HYUNDAI_GENESIS.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_74_HYUNDAI_GENESIS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe28d0>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe20c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_89_HYUNDAI_SANTA_CRUZ_1ST_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_89_HYUNDAI_SANTA_CRUZ_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b57e60>, flags=<tomllib._parser.Flags object at 0x7fe5a5b57d10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_82_HYUNDAI_IONIQ_PHEV_2019.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_82_HYUNDAI_IONIQ_PHEV_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e986630>, flags=<tomllib._parser.Flags object at 0x7f2a1e985ac0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_89_HYUNDAI_SANTA_CRUZ_1ST_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_89_HYUNDAI_SANTA_CRUZ_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b57e60>, flags=<tomllib._parser.Flags object at 0x7fe5a5b57d10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_75_HYUNDAI_IONIQ.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_75_HYUNDAI_IONIQ'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dec55b0>, flags=<tomllib._parser.Flags object at 0x7f3f1dec5370>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_82_HYUNDAI_IONIQ_PHEV_2019.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_82_HYUNDAI_IONIQ_PHEV_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e986630>, flags=<tomllib._parser.Flags object at 0x7f2a1e985ac0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_90_HYUNDAI_SANTA_FE.test_jerk_limits ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_90_HYUNDAI_SANTA_FE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b578f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b565a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_75_HYUNDAI_IONIQ.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_75_HYUNDAI_IONIQ'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dec55b0>, flags=<tomllib._parser.Flags object at 0x7f3f1dec5370>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_83_HYUNDAI_KONA.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_83_HYUNDAI_KONA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee6bef0>, flags=<tomllib._parser.Flags object at 0x7f2a1ee6bda0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_90_HYUNDAI_SANTA_FE.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_90_HYUNDAI_SANTA_FE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b578f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b565a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_76_HYUNDAI_IONIQ_5.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_76_HYUNDAI_IONIQ_5'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dec5af0>, flags=<tomllib._parser.Flags object at 0x7f3f1dec5490>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_83_HYUNDAI_KONA.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_83_HYUNDAI_KONA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee6bef0>, flags=<tomllib._parser.Flags object at 0x7f2a1ee6bda0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_91_HYUNDAI_SANTA_FE_2022.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_91_HYUNDAI_SANTA_FE_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b94c80>, flags=<tomllib._parser.Flags object at 0x7fe5a5b94620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_84_HYUNDAI_KONA_EV.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_84_HYUNDAI_KONA_EV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907cb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e905010>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_76_HYUNDAI_IONIQ_5.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_76_HYUNDAI_IONIQ_5'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dec5af0>, flags=<tomllib._parser.Flags object at 0x7f3f1dec5490>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_91_HYUNDAI_SANTA_FE_2022.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_91_HYUNDAI_SANTA_FE_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b94c80>, flags=<tomllib._parser.Flags object at 0x7fe5a5b94620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_84_HYUNDAI_KONA_EV.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_84_HYUNDAI_KONA_EV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907cb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e905010>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_77_HYUNDAI_IONIQ_6.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_77_HYUNDAI_IONIQ_6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfa3ef0>, flags=<tomllib._parser.Flags object at 0x7f3f1dfa2c90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_92_HYUNDAI_SANTA_FE_HEV_2022.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_92_HYUNDAI_SANTA_FE_HEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b96810>, flags=<tomllib._parser.Flags object at 0x7fe5a5b97fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_85_HYUNDAI_KONA_EV_2022.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_85_HYUNDAI_KONA_EV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907e30>, flags=<tomllib._parser.Flags object at 0x7f2a1e905370>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_77_HYUNDAI_IONIQ_6.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_77_HYUNDAI_IONIQ_6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfa3ef0>, flags=<tomllib._parser.Flags object at 0x7f3f1dfa2c90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_92_HYUNDAI_SANTA_FE_HEV_2022.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_92_HYUNDAI_SANTA_FE_HEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b96810>, flags=<tomllib._parser.Flags object at 0x7fe5a5b97fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_85_HYUNDAI_KONA_EV_2022.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_85_HYUNDAI_KONA_EV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907e30>, flags=<tomllib._parser.Flags object at 0x7f2a1e905370>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_78_HYUNDAI_IONIQ_EV_2020.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_78_HYUNDAI_IONIQ_EV_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe2c00>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe2150>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_93_HYUNDAI_SANTA_FE_PHEV_2022.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_93_HYUNDAI_SANTA_FE_PHEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bdbdd0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bdb380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_86_HYUNDAI_KONA_EV_2ND_GEN.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_86_HYUNDAI_KONA_EV_2ND_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9363f0>, flags=<tomllib._parser.Flags object at 0x7f2a1e934d40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_78_HYUNDAI_IONIQ_EV_2020.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_78_HYUNDAI_IONIQ_EV_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe2c00>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe2150>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_86_HYUNDAI_KONA_EV_2ND_GEN.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_86_HYUNDAI_KONA_EV_2ND_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9363f0>, flags=<tomllib._parser.Flags object at 0x7f2a1e934d40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_93_HYUNDAI_SANTA_FE_PHEV_2022.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_93_HYUNDAI_SANTA_FE_PHEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bdbdd0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bdb380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_95_HYUNDAI_SONATA_HYBRID.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_95_HYUNDAI_SONATA_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfc8f80>, flags=<tomllib._parser.Flags object at 0x7f3f1dfc9c70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_87_HYUNDAI_KONA_HEV.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_87_HYUNDAI_KONA_HEV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee8b7a0>, flags=<tomllib._parser.Flags object at 0x7f2a1ee8ac60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_94_HYUNDAI_SONATA.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_94_HYUNDAI_SONATA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc66f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc65d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_96_HYUNDAI_SONATA_LF.test_jerk_limits ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_96_HYUNDAI_SONATA_LF'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0755e0>, flags=<tomllib._parser.Flags object at 0x7f3f1e077650>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_94_HYUNDAI_SONATA.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_94_HYUNDAI_SONATA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc66f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc65d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_103_KIA_CARNIVAL_4TH_GEN.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_103_KIA_CARNIVAL_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e922f30>, flags=<tomllib._parser.Flags object at 0x7f2a1e922120>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_96_HYUNDAI_SONATA_LF.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_96_HYUNDAI_SONATA_LF'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0755e0>, flags=<tomllib._parser.Flags object at 0x7f3f1e077650>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_95_HYUNDAI_SONATA_HYBRID.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_95_HYUNDAI_SONATA_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b562d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b56e10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_104_KIA_CEED.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_104_KIA_CEED'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a8470>, flags=<tomllib._parser.Flags object at 0x7f2a1e9a91f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_97_HYUNDAI_STARIA_4TH_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_97_HYUNDAI_STARIA_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe3140>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe33e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_104_KIA_CEED.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_104_KIA_CEED'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9a8470>, flags=<tomllib._parser.Flags object at 0x7f2a1e9a91f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_111_KIA_NIRO_EV_2ND_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_111_KIA_NIRO_EV_2ND_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc5100>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc6e40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_97_HYUNDAI_STARIA_4TH_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_97_HYUNDAI_STARIA_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dfe3140>, flags=<tomllib._parser.Flags object at 0x7f3f1dfe33e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_111_KIA_NIRO_EV_2ND_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_111_KIA_NIRO_EV_2ND_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cc5100>, flags=<tomllib._parser.Flags object at 0x7fe5a5cc6e40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_105_KIA_EV6.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_105_KIA_EV6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f3c5cd0>, flags=<tomllib._parser.Flags object at 0x7f2a1f3c6e70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_98_HYUNDAI_TUCSON.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_98_HYUNDAI_TUCSON'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e65e450>, flags=<tomllib._parser.Flags object at 0x7f3f1e65f200>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_105_KIA_EV6.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_105_KIA_EV6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f3c5cd0>, flags=<tomllib._parser.Flags object at 0x7f2a1f3c6e70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_112_KIA_NIRO_HEV_2021.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_112_KIA_NIRO_HEV_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cbb920>, flags=<tomllib._parser.Flags object at 0x7fe5a5cbb740>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_98_HYUNDAI_TUCSON.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_98_HYUNDAI_TUCSON'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e65e450>, flags=<tomllib._parser.Flags object at 0x7f3f1e65f200>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_112_KIA_NIRO_HEV_2021.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_112_KIA_NIRO_HEV_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cbb920>, flags=<tomllib._parser.Flags object at 0x7fe5a5cbb740>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_106_KIA_FORTE.test_jerk_limits ______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_106_KIA_FORTE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907fb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e907e30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_99_HYUNDAI_TUCSON_4TH_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_99_HYUNDAI_TUCSON_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e086cc0>, flags=<tomllib._parser.Flags object at 0x7f3f1e087590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_113_KIA_NIRO_HEV_2ND_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_113_KIA_NIRO_HEV_2ND_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd37a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd3e60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_106_KIA_FORTE.test_max_lateral_accel ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_106_KIA_FORTE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e907fb0>, flags=<tomllib._parser.Flags object at 0x7f2a1e907e30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_99_HYUNDAI_TUCSON_4TH_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_99_HYUNDAI_TUCSON_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e086cc0>, flags=<tomllib._parser.Flags object at 0x7f3f1e087590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_113_KIA_NIRO_HEV_2ND_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_113_KIA_NIRO_HEV_2ND_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5dd37a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5dd3e60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_107_KIA_K5_2021.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_107_KIA_K5_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee89700>, flags=<tomllib._parser.Flags object at 0x7f2a1ee8b9b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_100_HYUNDAI_VELOSTER.test_jerk_limits ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_100_HYUNDAI_VELOSTER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df77050>, flags=<tomllib._parser.Flags object at 0x7f3f1df76a80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_114_KIA_NIRO_PHEV.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_114_KIA_NIRO_PHEV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b57e30>, flags=<tomllib._parser.Flags object at 0x7fe5a5b563c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_107_KIA_K5_2021.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_107_KIA_K5_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee89700>, flags=<tomllib._parser.Flags object at 0x7f2a1ee8b9b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_100_HYUNDAI_VELOSTER.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_100_HYUNDAI_VELOSTER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df77050>, flags=<tomllib._parser.Flags object at 0x7f3f1df76a80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_114_KIA_NIRO_PHEV.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_114_KIA_NIRO_PHEV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b57e30>, flags=<tomllib._parser.Flags object at 0x7fe5a5b563c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_108_KIA_K5_HEV_2020.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_108_KIA_K5_HEV_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eee8d40>, flags=<tomllib._parser.Flags object at 0x7f2a1eeea600>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_101_JEEP_GRAND_CHEROKEE.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_101_JEEP_GRAND_CHEROKEE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e596060>, flags=<tomllib._parser.Flags object at 0x7f3f1e594e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_115_KIA_NIRO_PHEV_2022.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_115_KIA_NIRO_PHEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c0ae40>, flags=<tomllib._parser.Flags object at 0x7fe5a5c0a000>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_108_KIA_K5_HEV_2020.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_108_KIA_K5_HEV_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eee8d40>, flags=<tomllib._parser.Flags object at 0x7f2a1eeea600>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_101_JEEP_GRAND_CHEROKEE.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_101_JEEP_GRAND_CHEROKEE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e596060>, flags=<tomllib._parser.Flags object at 0x7f3f1e594e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_115_KIA_NIRO_PHEV_2022.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_115_KIA_NIRO_PHEV_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c0ae40>, flags=<tomllib._parser.Flags object at 0x7fe5a5c0a000>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_109_KIA_K8_HEV_1ST_GEN.test_jerk_limits __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_109_KIA_K8_HEV_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee881a0>, flags=<tomllib._parser.Flags object at 0x7f2a1ee895e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_102_JEEP_GRAND_CHEROKEE_2019.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_102_JEEP_GRAND_CHEROKEE_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df756d0>, flags=<tomllib._parser.Flags object at 0x7f3f1df772c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_116_KIA_OPTIMA_G4.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_116_KIA_OPTIMA_G4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c572c0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c566f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_109_KIA_K8_HEV_1ST_GEN.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_109_KIA_K8_HEV_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1ee881a0>, flags=<tomllib._parser.Flags object at 0x7f2a1ee895e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_102_JEEP_GRAND_CHEROKEE_2019.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_102_JEEP_GRAND_CHEROKEE_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df756d0>, flags=<tomllib._parser.Flags object at 0x7f3f1df772c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_116_KIA_OPTIMA_G4.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_116_KIA_OPTIMA_G4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c572c0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c566f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_110_KIA_NIRO_EV.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_110_KIA_NIRO_EV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeeb8c0>, flags=<tomllib._parser.Flags object at 0x7f2a1eeeb770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_103_KIA_CARNIVAL_4TH_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_103_KIA_CARNIVAL_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0cb2c0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cb080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_117_KIA_OPTIMA_G4_FL.test_jerk_limits ___
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_117_KIA_OPTIMA_G4_FL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb8aa0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cbb320>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_110_KIA_NIRO_EV.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_110_KIA_NIRO_EV'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeeb8c0>, flags=<tomllib._parser.Flags object at 0x7f2a1eeeb770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_118_KIA_OPTIMA_H.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_118_KIA_OPTIMA_H'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df77770>, flags=<tomllib._parser.Flags object at 0x7f3f1df773b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_117_KIA_OPTIMA_G4_FL.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_117_KIA_OPTIMA_G4_FL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb8aa0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cbb320>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_125_KIA_STINGER.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_125_KIA_STINGER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eee9ac0>, flags=<tomllib._parser.Flags object at 0x7f2a1eee8fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_119_KIA_OPTIMA_H_G4_FL.test_jerk_limits __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_119_KIA_OPTIMA_H_G4_FL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c9100>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cba10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_118_KIA_OPTIMA_H.test_jerk_limits _____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_118_KIA_OPTIMA_H'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c083e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5c0a3f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_126_KIA_STINGER_2022.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_126_KIA_STINGER_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e92de20>, flags=<tomllib._parser.Flags object at 0x7f2a1e92df40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_119_KIA_OPTIMA_H_G4_FL.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_119_KIA_OPTIMA_H_G4_FL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c9100>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cba10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_132_LEXUS_IS_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_132_LEXUS_IS_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c51e80>, flags=<tomllib._parser.Flags object at 0x7fe5a5c53c20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_126_KIA_STINGER_2022.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_126_KIA_STINGER_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e92de20>, flags=<tomllib._parser.Flags object at 0x7f2a1e92df40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_120_KIA_SELTOS.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_120_KIA_SELTOS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df86810>, flags=<tomllib._parser.Flags object at 0x7f3f1df86030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_133_LEXUS_LC_TSS2.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_133_LEXUS_LC_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bdb4a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bd8590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_120_KIA_SELTOS.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_120_KIA_SELTOS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df86810>, flags=<tomllib._parser.Flags object at 0x7f3f1df86030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_127_LEXUS_CTH.test_jerk_limits ______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_127_LEXUS_CTH'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeebaa0>, flags=<tomllib._parser.Flags object at 0x7f2a1eeebf50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_133_LEXUS_LC_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_133_LEXUS_LC_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bdb4a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bd8590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_121_KIA_SORENTO.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_121_KIA_SORENTO'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c8b90>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cbfe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_127_LEXUS_CTH.test_max_lateral_accel ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_127_LEXUS_CTH'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeebaa0>, flags=<tomllib._parser.Flags object at 0x7f2a1eeebf50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_134_LEXUS_NX.test_jerk_limits _______
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_134_LEXUS_NX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c52570>, flags=<tomllib._parser.Flags object at 0x7fe5a5c52000>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_121_KIA_SORENTO.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_121_KIA_SORENTO'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0c8b90>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cbfe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_128_LEXUS_ES.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_128_LEXUS_ES'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb53f80>, flags=<tomllib._parser.Flags object at 0x7f2a1eb50cb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_134_LEXUS_NX.test_max_lateral_accel ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_134_LEXUS_NX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c52570>, flags=<tomllib._parser.Flags object at 0x7fe5a5c52000>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_122_KIA_SORENTO_4TH_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_122_KIA_SORENTO_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df759a0>, flags=<tomllib._parser.Flags object at 0x7f3f1df74830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_128_LEXUS_ES.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_128_LEXUS_ES'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb53f80>, flags=<tomllib._parser.Flags object at 0x7f2a1eb50cb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_135_LEXUS_NX_TSS2.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_135_LEXUS_NX_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b950a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b97080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_122_KIA_SORENTO_4TH_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_122_KIA_SORENTO_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df759a0>, flags=<tomllib._parser.Flags object at 0x7f3f1df74830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_129_LEXUS_ES_TSS2.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_129_LEXUS_ES_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb53a70>, flags=<tomllib._parser.Flags object at 0x7f2a1eb507a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_135_LEXUS_NX_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_135_LEXUS_NX_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b950a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b97080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_123_KIA_SORENTO_HEV_4TH_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_123_KIA_SORENTO_HEV_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0cbfb0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cb710>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_152_SEAT_ATECA_MK1.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_152_SEAT_ATECA_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603026450>, flags=<tomllib._parser.Flags object at 0x7f56030251c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_129_LEXUS_ES_TSS2.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_129_LEXUS_ES_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb53a70>, flags=<tomllib._parser.Flags object at 0x7f2a1eb507a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_136_LEXUS_RC.test_jerk_limits _______
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_136_LEXUS_RC'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c51a90>, flags=<tomllib._parser.Flags object at 0x7fe5a5c516a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_123_KIA_SORENTO_HEV_4TH_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_123_KIA_SORENTO_HEV_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0cbfb0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0cb710>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_130_LEXUS_GS_F.test_jerk_limits ______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_130_LEXUS_GS_F'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e7de3c0>, flags=<tomllib._parser.Flags object at 0x7f2a1e7de060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_153_SKODA_FABIA_MK4.test_jerk_limits ___
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_153_SKODA_FABIA_MK4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eace30>, flags=<tomllib._parser.Flags object at 0x7f5602eaf500>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_136_LEXUS_RC.test_max_lateral_accel ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_136_LEXUS_RC'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5c51a90>, flags=<tomllib._parser.Flags object at 0x7fe5a5c516a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_124_KIA_SPORTAGE_5TH_GEN.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_124_KIA_SPORTAGE_5TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df89490>, flags=<tomllib._parser.Flags object at 0x7f3f1df88ef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_130_LEXUS_GS_F.test_max_lateral_accel ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_130_LEXUS_GS_F'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e7de3c0>, flags=<tomllib._parser.Flags object at 0x7f2a1e7de060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_153_SKODA_FABIA_MK4.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_153_SKODA_FABIA_MK4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eace30>, flags=<tomllib._parser.Flags object at 0x7f5602eaf500>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_137_LEXUS_RX.test_jerk_limits _______
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_137_LEXUS_RX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb71d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cb70e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_124_KIA_SPORTAGE_5TH_GEN.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_124_KIA_SPORTAGE_5TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df89490>, flags=<tomllib._parser.Flags object at 0x7f3f1df88ef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_131_LEXUS_IS.test_jerk_limits _______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_131_LEXUS_IS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e7deab0>, flags=<tomllib._parser.Flags object at 0x7f2a1e7dca40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_154_SKODA_KAMIQ_MK1.test_jerk_limits ___
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_154_SKODA_KAMIQ_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56035370b0>, flags=<tomllib._parser.Flags object at 0x7f56031e8ef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_137_LEXUS_RX.test_max_lateral_accel ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_137_LEXUS_RX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5cb71d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5cb70e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_125_KIA_STINGER.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_125_KIA_STINGER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df8b050>, flags=<tomllib._parser.Flags object at 0x7f3f1df8aea0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_131_LEXUS_IS.test_max_lateral_accel ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_131_LEXUS_IS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e7deab0>, flags=<tomllib._parser.Flags object at 0x7f2a1e7dca40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_154_SKODA_KAMIQ_MK1.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_154_SKODA_KAMIQ_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56035370b0>, flags=<tomllib._parser.Flags object at 0x7f56031e8ef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_138_LEXUS_RX_TSS2.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_138_LEXUS_RX_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bf78c0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bf60f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_139_MAZDA_3.test_max_lateral_accel ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_139_MAZDA_3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1deab5c0>, flags=<tomllib._parser.Flags object at 0x7f3f1deaad20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_132_LEXUS_IS_TSS2.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_132_LEXUS_IS_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e888290>, flags=<tomllib._parser.Flags object at 0x7f2a1e88a840>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_155_SKODA_KAROQ_MK1.test_jerk_limits ___
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_155_SKODA_KAROQ_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f8dcd0>, flags=<tomllib._parser.Flags object at 0x7f5602f8c620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_138_LEXUS_RX_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_138_LEXUS_RX_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bf78c0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bf60f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_140_MAZDA_6.test_jerk_limits _______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_140_MAZDA_6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dea8f80>, flags=<tomllib._parser.Flags object at 0x7f3f1deaa2d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_155_SKODA_KAROQ_MK1.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_155_SKODA_KAROQ_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f8dcd0>, flags=<tomllib._parser.Flags object at 0x7f5602f8c620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_139_MAZDA_3.test_jerk_limits _______
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_139_MAZDA_3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bf6330>, flags=<tomllib._parser.Flags object at 0x7fe5a5bf6030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_140_MAZDA_6.test_max_lateral_accel ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_140_MAZDA_6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dea8f80>, flags=<tomllib._parser.Flags object at 0x7f3f1deaa2d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_146_NISSAN_LEAF.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_146_NISSAN_LEAF'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e88bbc0>, flags=<tomllib._parser.Flags object at 0x7f2a1e8892e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_156_SKODA_KODIAQ_MK1.test_jerk_limits ___
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_156_SKODA_KODIAQ_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602fbd9a0>, flags=<tomllib._parser.Flags object at 0x7f5602fbf290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_163_SUBARU_FORESTER_2022.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_163_SUBARU_FORESTER_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bf5130>, flags=<tomllib._parser.Flags object at 0x7fe5a5bf5550>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_141_MAZDA_CX5.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_141_MAZDA_CX5'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df89730>, flags=<tomllib._parser.Flags object at 0x7f3f1df8bf80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_146_NISSAN_LEAF.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_146_NISSAN_LEAF'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e88bbc0>, flags=<tomllib._parser.Flags object at 0x7f2a1e8892e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_156_SKODA_KODIAQ_MK1.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_156_SKODA_KODIAQ_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602fbd9a0>, flags=<tomllib._parser.Flags object at 0x7f5602fbf290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_163_SUBARU_FORESTER_2022.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_163_SUBARU_FORESTER_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bf5130>, flags=<tomllib._parser.Flags object at 0x7fe5a5bf5550>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_141_MAZDA_CX5.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_141_MAZDA_CX5'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1df89730>, flags=<tomllib._parser.Flags object at 0x7f3f1df8bf80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_147_NISSAN_LEAF_IC.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_147_NISSAN_LEAF_IC'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eaa2540>, flags=<tomllib._parser.Flags object at 0x7f2a1eaa30e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_157_SKODA_OCTAVIA_MK3.test_jerk_limits __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_157_SKODA_OCTAVIA_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602fbfd70>, flags=<tomllib._parser.Flags object at 0x7f5602fbeb10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_164_SUBARU_FORESTER_HYBRID.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_164_SUBARU_FORESTER_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b6d730>, flags=<tomllib._parser.Flags object at 0x7fe5a5b6eea0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_142_MAZDA_CX5_2022.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_142_MAZDA_CX5_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de6d400>, flags=<tomllib._parser.Flags object at 0x7f3f1de6f500>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_147_NISSAN_LEAF_IC.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_147_NISSAN_LEAF_IC'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eaa2540>, flags=<tomllib._parser.Flags object at 0x7f2a1eaa30e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_157_SKODA_OCTAVIA_MK3.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_157_SKODA_OCTAVIA_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602fbfd70>, flags=<tomllib._parser.Flags object at 0x7f5602fbeb10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_164_SUBARU_FORESTER_HYBRID.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_164_SUBARU_FORESTER_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b6d730>, flags=<tomllib._parser.Flags object at 0x7fe5a5b6eea0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_142_MAZDA_CX5_2022.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_142_MAZDA_CX5_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de6d400>, flags=<tomllib._parser.Flags object at 0x7f3f1de6f500>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_148_NISSAN_ROGUE.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_148_NISSAN_ROGUE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a3692dd90>, flags=<tomllib._parser.Flags object at 0x7f2a1eeb3650>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_165_SUBARU_FORESTER_PREGLOBAL.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_165_SUBARU_FORESTER_PREGLOBAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b6fda0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b6c0b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
______ ERROR at setup of TestLateralLimits_143_MAZDA_CX9.test_jerk_limits ______
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_143_MAZDA_CX9'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1deaaf60>, flags=<tomllib._parser.Flags object at 0x7f3f1deaac00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_148_NISSAN_ROGUE.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_148_NISSAN_ROGUE'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a3692dd90>, flags=<tomllib._parser.Flags object at 0x7f2a1eeb3650>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_158_SKODA_SUPERB_MK3.test_jerk_limits ___
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_158_SKODA_SUPERB_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603055010>, flags=<tomllib._parser.Flags object at 0x7f5603056c30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_165_SUBARU_FORESTER_PREGLOBAL.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_165_SUBARU_FORESTER_PREGLOBAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5b6fda0>, flags=<tomllib._parser.Flags object at 0x7fe5a5b6c0b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_143_MAZDA_CX9.test_max_lateral_accel ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_143_MAZDA_CX9'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1deaaf60>, flags=<tomllib._parser.Flags object at 0x7f3f1deaac00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_158_SKODA_SUPERB_MK3.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_158_SKODA_SUPERB_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603055010>, flags=<tomllib._parser.Flags object at 0x7f5603056c30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_149_NISSAN_XTRAIL.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_149_NISSAN_XTRAIL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f0ba750>, flags=<tomllib._parser.Flags object at 0x7f2a1f0ba720>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_166_SUBARU_IMPREZA.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_166_SUBARU_IMPREZA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbf8c0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbddf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_144_MAZDA_CX9_2021.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_144_MAZDA_CX9_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dedcef0>, flags=<tomllib._parser.Flags object at 0x7f3f1dede630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_159_SUBARU_ASCENT.test_jerk_limits ____
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_159_SUBARU_ASCENT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e9670>, flags=<tomllib._parser.Flags object at 0x7f56031e9310>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_149_NISSAN_XTRAIL.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_149_NISSAN_XTRAIL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f0ba750>, flags=<tomllib._parser.Flags object at 0x7f2a1f0ba720>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_166_SUBARU_IMPREZA.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_166_SUBARU_IMPREZA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbf8c0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbddf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_144_MAZDA_CX9_2021.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_144_MAZDA_CX9_2021'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dedcef0>, flags=<tomllib._parser.Flags object at 0x7f3f1dede630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_159_SUBARU_ASCENT.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_159_SUBARU_ASCENT'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e9670>, flags=<tomllib._parser.Flags object at 0x7f56031e9310>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_150_RAM_1500_5TH_GEN.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_150_RAM_1500_5TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9abc80>, flags=<tomllib._parser.Flags object at 0x7f2a1e9aa930>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_167_SUBARU_IMPREZA_2020.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_167_SUBARU_IMPREZA_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbd610>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbffe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_145_NISSAN_ALTIMA.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_145_NISSAN_ALTIMA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dedf3b0>, flags=<tomllib._parser.Flags object at 0x7f3f1dedd490>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_160_SUBARU_ASCENT_2023.test_jerk_limits __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_160_SUBARU_ASCENT_2023'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603614e30>, flags=<tomllib._parser.Flags object at 0x7f5603616030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_150_RAM_1500_5TH_GEN.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_150_RAM_1500_5TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e9abc80>, flags=<tomllib._parser.Flags object at 0x7f2a1e9aa930>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_167_SUBARU_IMPREZA_2020.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_167_SUBARU_IMPREZA_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbd610>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbffe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_145_NISSAN_ALTIMA.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_145_NISSAN_ALTIMA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dedf3b0>, flags=<tomllib._parser.Flags object at 0x7f3f1dedd490>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_160_SUBARU_ASCENT_2023.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_160_SUBARU_ASCENT_2023'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603614e30>, flags=<tomllib._parser.Flags object at 0x7f5603616030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_151_RAM_HD_5TH_GEN.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_151_RAM_HD_5TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb1f410>, flags=<tomllib._parser.Flags object at 0x7f2a1eb1cad0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_168_SUBARU_LEGACY.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_168_SUBARU_LEGACY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbfd10>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbfc20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_169_SUBARU_LEGACY_PREGLOBAL.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_169_SUBARU_LEGACY_PREGLOBAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dedd820>, flags=<tomllib._parser.Flags object at 0x7f3f1dedff80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_161_SUBARU_CROSSTREK_HYBRID.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_161_SUBARU_CROSSTREK_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031f1220>, flags=<tomllib._parser.Flags object at 0x7f56031f37d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_151_RAM_HD_5TH_GEN.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_151_RAM_HD_5TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb1f410>, flags=<tomllib._parser.Flags object at 0x7f2a1eb1cad0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_168_SUBARU_LEGACY.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_168_SUBARU_LEGACY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbfd10>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbfc20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_169_SUBARU_LEGACY_PREGLOBAL.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_169_SUBARU_LEGACY_PREGLOBAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dedd820>, flags=<tomllib._parser.Flags object at 0x7f3f1dedff80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_161_SUBARU_CROSSTREK_HYBRID.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_161_SUBARU_CROSSTREK_HYBRID'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031f1220>, flags=<tomllib._parser.Flags object at 0x7f56031f37d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_152_SEAT_ATECA_MK1.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_152_SEAT_ATECA_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e92c8c0>, flags=<tomllib._parser.Flags object at 0x7f2a1e92dee0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_174_TESLA_MODEL_3.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_174_TESLA_MODEL_3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5ab93d0>, flags=<tomllib._parser.Flags object at 0x7fe5a5abbe30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_170_SUBARU_OUTBACK.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_170_SUBARU_OUTBACK'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dede810>, flags=<tomllib._parser.Flags object at 0x7f3f1dede900>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_180_TOYOTA_CAMRY.test_jerk_limits _____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_180_TOYOTA_CAMRY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e987920>, flags=<tomllib._parser.Flags object at 0x7f2a1e986630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_175_TESLA_MODEL_Y.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_175_TESLA_MODEL_Y'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbda00>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbffe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_170_SUBARU_OUTBACK.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_170_SUBARU_OUTBACK'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dede810>, flags=<tomllib._parser.Flags object at 0x7f3f1dede900>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_162_SUBARU_FORESTER.test_jerk_limits ___
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_162_SUBARU_FORESTER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602e34380>, flags=<tomllib._parser.Flags object at 0x7f5602e34b30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_162_SUBARU_FORESTER.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_162_SUBARU_FORESTER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602e34380>, flags=<tomllib._parser.Flags object at 0x7f5602e34b30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_180_TOYOTA_CAMRY.test_max_lateral_accel __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_180_TOYOTA_CAMRY'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e987920>, flags=<tomllib._parser.Flags object at 0x7f2a1e986630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_175_TESLA_MODEL_Y.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_175_TESLA_MODEL_Y'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbda00>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbffe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_171_SUBARU_OUTBACK_2023.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_171_SUBARU_OUTBACK_2023'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd5ed80>, flags=<tomllib._parser.Flags object at 0x7f3f1dd5e390>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_185_TOYOTA_COROLLA_TSS2.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_185_TOYOTA_COROLLA_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031ea1b0>, flags=<tomllib._parser.Flags object at 0x7f56031e8f80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_181_TOYOTA_CAMRY_TSS2.test_jerk_limits __
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_181_TOYOTA_CAMRY_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb52d20>, flags=<tomllib._parser.Flags object at 0x7f2a1eb53440>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_176_TOYOTA_ALPHARD_TSS2.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_176_TOYOTA_ALPHARD_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5a648f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5a663f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_171_SUBARU_OUTBACK_2023.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_171_SUBARU_OUTBACK_2023'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd5ed80>, flags=<tomllib._parser.Flags object at 0x7f3f1dd5e390>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_186_TOYOTA_HIGHLANDER.test_jerk_limits __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_186_TOYOTA_HIGHLANDER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f97d10>, flags=<tomllib._parser.Flags object at 0x7f5602f96690>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_176_TOYOTA_ALPHARD_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_176_TOYOTA_ALPHARD_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5a648f0>, flags=<tomllib._parser.Flags object at 0x7fe5a5a663f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_181_TOYOTA_CAMRY_TSS2.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_181_TOYOTA_CAMRY_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eb52d20>, flags=<tomllib._parser.Flags object at 0x7f2a1eb53440>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_172_SUBARU_OUTBACK_PREGLOBAL.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_172_SUBARU_OUTBACK_PREGLOBAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd42ff0>, flags=<tomllib._parser.Flags object at 0x7f3f1dd41e50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_186_TOYOTA_HIGHLANDER.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_186_TOYOTA_HIGHLANDER'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f97d10>, flags=<tomllib._parser.Flags object at 0x7f5602f96690>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_177_TOYOTA_AVALON.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_177_TOYOTA_AVALON'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbd3a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbdee0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_182_TOYOTA_CHR.test_jerk_limits ______
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_182_TOYOTA_CHR'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e937380>, flags=<tomllib._parser.Flags object at 0x7f2a1e9355b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_172_SUBARU_OUTBACK_PREGLOBAL.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_172_SUBARU_OUTBACK_PREGLOBAL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd42ff0>, flags=<tomllib._parser.Flags object at 0x7f3f1dd41e50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_187_TOYOTA_HIGHLANDER_TSS2.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_187_TOYOTA_HIGHLANDER_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031b4710>, flags=<tomllib._parser.Flags object at 0x7f56031b7860>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_177_TOYOTA_AVALON.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_177_TOYOTA_AVALON'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbd3a0>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbdee0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_182_TOYOTA_CHR.test_max_lateral_accel ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_182_TOYOTA_CHR'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e937380>, flags=<tomllib._parser.Flags object at 0x7f2a1e9355b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_173_SUBARU_OUTBACK_PREGLOBAL_2018.test_jerk_limits _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_173_SUBARU_OUTBACK_PREGLOBAL_2018'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd424b0>, flags=<tomllib._parser.Flags object at 0x7f3f1dd41b80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_187_TOYOTA_HIGHLANDER_TSS2.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_187_TOYOTA_HIGHLANDER_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031b4710>, flags=<tomllib._parser.Flags object at 0x7f56031b7860>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_178_TOYOTA_AVALON_2019.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_178_TOYOTA_AVALON_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5a66510>, flags=<tomllib._parser.Flags object at 0x7fe5a5a66450>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_183_TOYOTA_CHR_TSS2.test_jerk_limits ___
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_183_TOYOTA_CHR_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeebc50>, flags=<tomllib._parser.Flags object at 0x7f2a1eeeade0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_173_SUBARU_OUTBACK_PREGLOBAL_2018.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_173_SUBARU_OUTBACK_PREGLOBAL_2018'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd424b0>, flags=<tomllib._parser.Flags object at 0x7f3f1dd41b80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_183_TOYOTA_CHR_TSS2.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_183_TOYOTA_CHR_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eeebc50>, flags=<tomllib._parser.Flags object at 0x7f2a1eeeade0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_188_TOYOTA_MIRAI.test_jerk_limits _____
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_188_TOYOTA_MIRAI'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560348a840>, flags=<tomllib._parser.Flags object at 0x7f56034880e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_174_TESLA_MODEL_3.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_174_TESLA_MODEL_3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd43b30>, flags=<tomllib._parser.Flags object at 0x7f3f1dd439e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_178_TOYOTA_AVALON_2019.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_178_TOYOTA_AVALON_2019'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5a66510>, flags=<tomllib._parser.Flags object at 0x7fe5a5a66450>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_188_TOYOTA_MIRAI.test_max_lateral_accel __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_188_TOYOTA_MIRAI'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560348a840>, flags=<tomllib._parser.Flags object at 0x7f56034880e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_179_TOYOTA_AVALON_TSS2.test_jerk_limits __
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_179_TOYOTA_AVALON_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5aae4e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5aad7f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_184_TOYOTA_COROLLA.test_jerk_limits ____
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_184_TOYOTA_COROLLA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f0db980>, flags=<tomllib._parser.Flags object at 0x7f2a1f0daab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_190_TOYOTA_PRIUS_TSS2.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_190_TOYOTA_PRIUS_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de0d5e0>, flags=<tomllib._parser.Flags object at 0x7f3f1de0f200>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_189_TOYOTA_PRIUS.test_jerk_limits _____
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_189_TOYOTA_PRIUS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603514f80>, flags=<tomllib._parser.Flags object at 0x7f56035158b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_179_TOYOTA_AVALON_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_179_TOYOTA_AVALON_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5aae4e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5aad7f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_184_TOYOTA_COROLLA.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_184_TOYOTA_COROLLA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f0db980>, flags=<tomllib._parser.Flags object at 0x7f2a1f0daab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_191_TOYOTA_PRIUS_V.test_jerk_limits ____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_191_TOYOTA_PRIUS_V'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de0d6d0>, flags=<tomllib._parser.Flags object at 0x7f3f1de0d850>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_209_VOLKSWAGEN_POLO_MK6.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_209_VOLKSWAGEN_POLO_MK6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518c5a300>, flags=<tomllib._parser.Flags object at 0x7fc518c5a120>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_195_TOYOTA_RAV4_TSS2.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_195_TOYOTA_RAV4_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5aadb80>, flags=<tomllib._parser.Flags object at 0x7fe5a5aad280>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_189_TOYOTA_PRIUS.test_max_lateral_accel __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_189_TOYOTA_PRIUS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603514f80>, flags=<tomllib._parser.Flags object at 0x7f56035158b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_216_VOLKSWAGEN_TROC_MK1.test_max_lateral_accel _
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_216_VOLKSWAGEN_TROC_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed13f050>, flags=<tomllib._parser.Flags object at 0x7f25ed13f1d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_185_TOYOTA_COROLLA_TSS2.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_185_TOYOTA_COROLLA_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f3c79b0>, flags=<tomllib._parser.Flags object at 0x7f2a1f3c5fd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_191_TOYOTA_PRIUS_V.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_191_TOYOTA_PRIUS_V'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de0d6d0>, flags=<tomllib._parser.Flags object at 0x7f3f1de0d850>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_210_VOLKSWAGEN_SHARAN_MK2.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_210_VOLKSWAGEN_SHARAN_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb74a0>, flags=<tomllib._parser.Flags object at 0x7fc518eb44a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_196_TOYOTA_RAV4_TSS2_2022.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_196_TOYOTA_RAV4_TSS2_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5aaf410>, flags=<tomllib._parser.Flags object at 0x7fe5a5aaf140>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_190_TOYOTA_PRIUS_TSS2.test_jerk_limits __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_190_TOYOTA_PRIUS_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb2c00>, flags=<tomllib._parser.Flags object at 0x7f5602eb0530>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_200_VOLKSWAGEN_ARTEON_MK1.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_200_VOLKSWAGEN_ARTEON_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e7dc140>, flags=<tomllib._parser.Flags object at 0x7f2a1e7ddeb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_192_TOYOTA_RAV4.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_192_TOYOTA_RAV4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de0d130>, flags=<tomllib._parser.Flags object at 0x7f3f1de0fb30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_210_VOLKSWAGEN_SHARAN_MK2.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_210_VOLKSWAGEN_SHARAN_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb74a0>, flags=<tomllib._parser.Flags object at 0x7fc518eb44a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_196_TOYOTA_RAV4_TSS2_2022.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_196_TOYOTA_RAV4_TSS2_2022'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5aaf410>, flags=<tomllib._parser.Flags object at 0x7fe5a5aaf140>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_201_VOLKSWAGEN_ATLAS_MK1.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_201_VOLKSWAGEN_ATLAS_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e92f7d0>, flags=<tomllib._parser.Flags object at 0x7f2a1e92c1d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_205_VOLKSWAGEN_JETTA_MK6.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_205_VOLKSWAGEN_JETTA_MK6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603057e90>, flags=<tomllib._parser.Flags object at 0x7f5603057c80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_192_TOYOTA_RAV4.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_192_TOYOTA_RAV4'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1de0d130>, flags=<tomllib._parser.Flags object at 0x7f3f1de0fb30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_211_VOLKSWAGEN_TAOS_MK1.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_211_VOLKSWAGEN_TAOS_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518a44ce0>, flags=<tomllib._parser.Flags object at 0x7fc518a45c70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_197_TOYOTA_RAV4_TSS2_2023.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_197_TOYOTA_RAV4_TSS2_2023'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a59793a0>, flags=<tomllib._parser.Flags object at 0x7fe5a597b1a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_205_VOLKSWAGEN_JETTA_MK6.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_205_VOLKSWAGEN_JETTA_MK6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603057e90>, flags=<tomllib._parser.Flags object at 0x7f5603057c80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_201_VOLKSWAGEN_ATLAS_MK1.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_201_VOLKSWAGEN_ATLAS_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e92f7d0>, flags=<tomllib._parser.Flags object at 0x7f2a1e92c1d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_211_VOLKSWAGEN_TAOS_MK1.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_211_VOLKSWAGEN_TAOS_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518a44ce0>, flags=<tomllib._parser.Flags object at 0x7fc518a45c70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_197_TOYOTA_RAV4_TSS2_2023.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_197_TOYOTA_RAV4_TSS2_2023'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a59793a0>, flags=<tomllib._parser.Flags object at 0x7fe5a597b1a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_193_TOYOTA_RAV4H.test_jerk_limits _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_193_TOYOTA_RAV4H'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd7e450>, flags=<tomllib._parser.Flags object at 0x7f3f1dd7dfd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_206_VOLKSWAGEN_JETTA_MK7.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_206_VOLKSWAGEN_JETTA_MK7'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603027bc0>, flags=<tomllib._parser.Flags object at 0x7f56030252b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_202_VOLKSWAGEN_CADDY_MK3.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_202_VOLKSWAGEN_CADDY_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e978110>, flags=<tomllib._parser.Flags object at 0x7f2a1e978080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_212_VOLKSWAGEN_TCROSS_MK1.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_212_VOLKSWAGEN_TCROSS_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bc0b00>, flags=<tomllib._parser.Flags object at 0x7fc518bc20c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_198_TOYOTA_SIENNA.test_jerk_limits ____
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_198_TOYOTA_SIENNA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a597a1e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5978080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_193_TOYOTA_RAV4H.test_max_lateral_accel __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_193_TOYOTA_RAV4H'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd7e450>, flags=<tomllib._parser.Flags object at 0x7f3f1dd7dfd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_206_VOLKSWAGEN_JETTA_MK7.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_206_VOLKSWAGEN_JETTA_MK7'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603027bc0>, flags=<tomllib._parser.Flags object at 0x7f56030252b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_202_VOLKSWAGEN_CADDY_MK3.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_202_VOLKSWAGEN_CADDY_MK3'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e978110>, flags=<tomllib._parser.Flags object at 0x7f2a1e978080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_212_VOLKSWAGEN_TCROSS_MK1.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_212_VOLKSWAGEN_TCROSS_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bc0b00>, flags=<tomllib._parser.Flags object at 0x7fc518bc20c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_198_TOYOTA_SIENNA.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_198_TOYOTA_SIENNA'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a597a1e0>, flags=<tomllib._parser.Flags object at 0x7fe5a5978080>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_194_TOYOTA_RAV4_PRIME.test_jerk_limits __
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_194_TOYOTA_RAV4_PRIME'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1deaa3f0>, flags=<tomllib._parser.Flags object at 0x7f3f1deaa720>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_203_VOLKSWAGEN_CRAFTER_MK2.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_203_VOLKSWAGEN_CRAFTER_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f0dadb0>, flags=<tomllib._parser.Flags object at 0x7f2a1f0daab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_207_VOLKSWAGEN_PASSAT_MK8.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_207_VOLKSWAGEN_PASSAT_MK8'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb3ad0>, flags=<tomllib._parser.Flags object at 0x7f5602eb0f80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_213_VOLKSWAGEN_TIGUAN_MK2.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_213_VOLKSWAGEN_TIGUAN_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518b36630>, flags=<tomllib._parser.Flags object at 0x7fc518b34b00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_199_TOYOTA_SIENNA_4TH_GEN.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_199_TOYOTA_SIENNA_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a59f0680>, flags=<tomllib._parser.Flags object at 0x7fe5a59f04a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_194_TOYOTA_RAV4_PRIME.test_max_lateral_accel _
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_194_TOYOTA_RAV4_PRIME'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1deaa3f0>, flags=<tomllib._parser.Flags object at 0x7f3f1deaa720>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_207_VOLKSWAGEN_PASSAT_MK8.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_207_VOLKSWAGEN_PASSAT_MK8'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb3ad0>, flags=<tomllib._parser.Flags object at 0x7f5602eb0f80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_203_VOLKSWAGEN_CRAFTER_MK2.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_203_VOLKSWAGEN_CRAFTER_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1f0dadb0>, flags=<tomllib._parser.Flags object at 0x7f2a1f0daab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_213_VOLKSWAGEN_TIGUAN_MK2.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_213_VOLKSWAGEN_TIGUAN_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518b36630>, flags=<tomllib._parser.Flags object at 0x7fc518b34b00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_195_TOYOTA_RAV4_TSS2.test_jerk_limits ___
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_195_TOYOTA_RAV4_TSS2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1dd5e9c0>, flags=<tomllib._parser.Flags object at 0x7f3f1dd5eff0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_208_VOLKSWAGEN_PASSAT_NMS.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_208_VOLKSWAGEN_PASSAT_NMS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602ead940>, flags=<tomllib._parser.Flags object at 0x7f5602eaf5c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_199_TOYOTA_SIENNA_4TH_GEN.test_max_lateral_accel _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_199_TOYOTA_SIENNA_4TH_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a59f0680>, flags=<tomllib._parser.Flags object at 0x7fe5a59f04a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_204_VOLKSWAGEN_GOLF_MK7.test_jerk_limits _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_204_VOLKSWAGEN_GOLF_MK7'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e97b230>, flags=<tomllib._parser.Flags object at 0x7f2a1e97ae10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_214_VOLKSWAGEN_TOURAN_MK2.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_214_VOLKSWAGEN_TOURAN_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518b365a0>, flags=<tomllib._parser.Flags object at 0x7fc518b35f70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_200_VOLKSWAGEN_ARTEON_MK1.test_jerk_limits _
[gw0] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_200_VOLKSWAGEN_ARTEON_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fe5a5bbef30>, flags=<tomllib._parser.Flags object at 0x7fe5a5bbef60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_204_VOLKSWAGEN_GOLF_MK7.test_max_lateral_accel _
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_204_VOLKSWAGEN_GOLF_MK7'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1e97b230>, flags=<tomllib._parser.Flags object at 0x7f2a1e97ae10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_214_VOLKSWAGEN_TOURAN_MK2.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_214_VOLKSWAGEN_TOURAN_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518b365a0>, flags=<tomllib._parser.Flags object at 0x7fc518b35f70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_208_VOLKSWAGEN_PASSAT_NMS.test_max_lateral_accel _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_208_VOLKSWAGEN_PASSAT_NMS'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602ead940>, flags=<tomllib._parser.Flags object at 0x7f5602eaf5c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_209_VOLKSWAGEN_POLO_MK6.test_jerk_limits _
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_209_VOLKSWAGEN_POLO_MK6'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602ead220>, flags=<tomllib._parser.Flags object at 0x7f5602ead4c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_215_VOLKSWAGEN_TRANSPORTER_T61.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_215_VOLKSWAGEN_TRANSPORTER_T61'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e75220>, flags=<tomllib._parser.Flags object at 0x7fc518e75580>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_215_VOLKSWAGEN_TRANSPORTER_T61.test_max_lateral_accel _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_215_VOLKSWAGEN_TRANSPORTER_T61'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e75220>, flags=<tomllib._parser.Flags object at 0x7fc518e75580>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_216_VOLKSWAGEN_TROC_MK1.test_jerk_limits _
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_216_VOLKSWAGEN_TROC_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d270b0>, flags=<tomllib._parser.Flags object at 0x7fc518d25fd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_______ ERROR at setup of TestLateralLimits_0_ACURA_ILX.test_jerk_limits _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_0_ACURA_ILX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1683d70>, flags=<tomllib._parser.Flags object at 0x7f18b16825d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
____ ERROR at setup of TestLateralLimits_0_ACURA_ILX.test_max_lateral_accel ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_0_ACURA_ILX'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1683d70>, flags=<tomllib._parser.Flags object at 0x7f18b16825d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_32_FORD_F_150_MK14.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_32_FORD_F_150_MK14'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16bfb60>, flags=<tomllib._parser.Flags object at 0x7f18b16bf5f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_33_FORD_MAVERICK_MK1.test_jerk_limits ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_33_FORD_MAVERICK_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15fff80>, flags=<tomllib._parser.Flags object at 0x7f18b15ff1a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_33_FORD_MAVERICK_MK1.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_33_FORD_MAVERICK_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15fff80>, flags=<tomllib._parser.Flags object at 0x7f18b15ff1a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_34_FORD_MUSTANG_MACH_E_MK1.test_jerk_limits _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_34_FORD_MUSTANG_MACH_E_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16bd4c0>, flags=<tomllib._parser.Flags object at 0x7f18b16be030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_34_FORD_MUSTANG_MACH_E_MK1.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_34_FORD_MUSTANG_MACH_E_MK1'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16bd4c0>, flags=<tomllib._parser.Flags object at 0x7f18b16be030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_35_FORD_RANGER_MK2.test_jerk_limits ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_35_FORD_RANGER_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15fed50>, flags=<tomllib._parser.Flags object at 0x7f18b15ff950>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_35_FORD_RANGER_MK2.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_35_FORD_RANGER_MK2'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15fed50>, flags=<tomllib._parser.Flags object at 0x7f18b15ff950>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_36_GENESIS_G70.test_jerk_limits ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_36_GENESIS_G70'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16bf2f0>, flags=<tomllib._parser.Flags object at 0x7f18b16bee40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_36_GENESIS_G70.test_max_lateral_accel ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_36_GENESIS_G70'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16bf2f0>, flags=<tomllib._parser.Flags object at 0x7f18b16bee40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
___ ERROR at setup of TestLateralLimits_37_GENESIS_G70_2020.test_jerk_limits ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_37_GENESIS_G70_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15d6d80>, flags=<tomllib._parser.Flags object at 0x7f18b15d5d90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_37_GENESIS_G70_2020.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_37_GENESIS_G70_2020'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15d6d80>, flags=<tomllib._parser.Flags object at 0x7f18b15d5d90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_38_GENESIS_G80.test_jerk_limits ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_38_GENESIS_G80'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15be120>, flags=<tomllib._parser.Flags object at 0x7f18b15be9f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_38_GENESIS_G80.test_max_lateral_accel ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_38_GENESIS_G80'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15be120>, flags=<tomllib._parser.Flags object at 0x7f18b15be9f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_39_GENESIS_G80_2ND_GEN_FL.test_jerk_limits _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_39_GENESIS_G80_2ND_GEN_FL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15bdfa0>, flags=<tomllib._parser.Flags object at 0x7f18b15bdd60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_39_GENESIS_G80_2ND_GEN_FL.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_39_GENESIS_G80_2ND_GEN_FL'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15bdfa0>, flags=<tomllib._parser.Flags object at 0x7f18b15bdd60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_____ ERROR at setup of TestLateralLimits_40_GENESIS_G90.test_jerk_limits ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_40_GENESIS_G90'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15bfb30>, flags=<tomllib._parser.Flags object at 0x7f18b15bf8c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
__ ERROR at setup of TestLateralLimits_40_GENESIS_G90.test_max_lateral_accel ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_40_GENESIS_G90'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b15bfb30>, flags=<tomllib._parser.Flags object at 0x7f18b15bf8c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_41_GENESIS_GV60_EV_1ST_GEN.test_jerk_limits _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_41_GENESIS_GV60_EV_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b14cd280>, flags=<tomllib._parser.Flags object at 0x7f18b14cd4c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_41_GENESIS_GV60_EV_1ST_GEN.test_max_lateral_accel _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_41_GENESIS_GV60_EV_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b14cd280>, flags=<tomllib._parser.Flags object at 0x7f18b14cd4c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_ ERROR at setup of TestLateralLimits_42_GENESIS_GV70_1ST_GEN.test_jerk_limits _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

cls = <class 'opendbc.car.tests.test_lateral_limits.TestLateralLimits_42_GENESIS_GV70_1ST_GEN'>

    @classmethod
    def setup_class(cls):
      CarInterface, _, _, _ = interfaces[cls.car_model]
>     CP = CarInterface.get_non_essential_params(cls.car_model)

opendbc/car/tests/test_lateral_limits.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b14cf890>, flags=<tomllib._parser.Flags object at 0x7f18b14cf290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
=================================== FAILURES ===================================
_____________ TestCarInterfaces.test_car_interfaces_046_GMC_YUKON ______________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbde20>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed68ac90>, flags=<tomllib._parser.Flags object at 0x7f25ed68a9f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbde20>,
    car_name=<CAR.GMC_YUKON>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_102_JEEP_GRAND_CHEROKEE_2019 ______
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317b9b50>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3108b350>, flags=<tomllib._parser.Flags object at 0x7f7b3108bf50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317b9b50>,
    car_name=<CAR.JEEP_GRAND_CHEROKEE_2019>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_158_SKODA_SUPERB_MK3 __________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197de840>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc51908b230>, flags=<tomllib._parser.Flags object at 0x7fc51908b3b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197de840>,
    car_name=<CAR.SKODA_SUPERB_MK3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_214_VOLKSWAGEN_TOURAN_MK2 ________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f3f1e945250>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e3cab10>, flags=<tomllib._parser.Flags object at 0x7f3f1e3ca840>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f3f1e945250>,
    car_name=<CAR.VOLKSWAGEN_TOURAN_MK2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_000_ACURA_ILX ______________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b6f4d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560348ae10>, flags=<tomllib._parser.Flags object at 0x7f5603488b90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b6f4d0>,
    car_name=<CAR.ACURA_ILX>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_159_SUBARU_ASCENT ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197de4b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc5190897f0>, flags=<tomllib._parser.Flags object at 0x7fc519088170>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197de4b0>,
    car_name=<CAR.SUBARU_ASCENT>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_047_HOLDEN_ASTRA ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbdb80>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed68bd10>, flags=<tomllib._parser.Flags object at 0x7f25ed68af60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbdb80>,
    car_name=<CAR.HOLDEN_ASTRA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_103_KIA_CARNIVAL_4TH_GEN ________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317b8b30>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b31089d90>, flags=<tomllib._parser.Flags object at 0x7f7b310881a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317b8b30>,
    car_name=<CAR.KIA_CARNIVAL_4TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestCarInterfaces.test_car_interfaces_215_VOLKSWAGEN_TRANSPORTER_T61 _____
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f3f1e944ec0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e3c9970>, flags=<tomllib._parser.Flags object at 0x7f3f1e3c8b30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f3f1e944ec0>,
    car_name=<CAR.VOLKSWAGEN_TRANSPORTER_T61>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_001_ACURA_RDX ______________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b971d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560348a720>, flags=<tomllib._parser.Flags object at 0x7f560348ac30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b971d0>,
    car_name=<CAR.ACURA_RDX>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________________ TestHyundaiFingerprint.test_feature_detection _________________
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.hyundai.tests.test_hyundai.TestHyundaiFingerprint object at 0x7f2a1b771130>

    def test_feature_detection(self):
      # HDA2
      for hda2 in (True, False):
        fingerprint = gen_empty_fingerprint()
        if hda2:
          cam_can = CanBus(None, fingerprint).CAM
          fingerprint[cam_can] = [0x50, 0x110]  # HDA2 steering messages
>       CP = CarInterface.get_params(CAR.KIA_EV6, fingerprint, [], False, False)

opendbc/car/hyundai/tests/test_hyundai.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1eef3ad0>, flags=<tomllib._parser.Flags object at 0x7f2a1eef3980>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_________________ TestHyundaiFingerprint.test_alternate_limits _________________
[gw1] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.hyundai.tests.test_hyundai.TestHyundaiFingerprint object at 0x7f2a1b771280>

    def test_alternate_limits(self):
      # Alternate lateral control limits, for high torque cars, verify Panda safety mode flag is set
      fingerprint = gen_empty_fingerprint()
      for car_model in CAR:
>       CP = CarInterface.get_params(car_model, fingerprint, [], False, False)

opendbc/car/hyundai/tests/test_hyundai.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f2a1b863620>, flags=<tomllib._parser.Flags object at 0x7f2a1ee69430>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
_________ TestCarInterfaces.test_car_interfaces_160_SUBARU_ASCENT_2023 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197de0f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e269f0>, flags=<tomllib._parser.Flags object at 0x7fc518e247d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197de0f0>,
    car_name=<CAR.SUBARU_ASCENT_2023>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_048_HONDA_ACCORD ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbd9a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed26e990>, flags=<tomllib._parser.Flags object at 0x7f25ed26c830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbd9a0>,
    car_name=<CAR.HONDA_ACCORD>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_216_VOLKSWAGEN_TROC_MK1 _________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f3f1e944b00>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e058dd0>, flags=<tomllib._parser.Flags object at 0x7f3f1e0585f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f3f1e944b00>,
    car_name=<CAR.VOLKSWAGEN_TROC_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______________ TestCarInterfaces.test_car_interfaces_104_KIA_CEED ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317ba930>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dcc7a0>, flags=<tomllib._parser.Flags object at 0x7f7b30dcd790>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317ba930>,
    car_name=<CAR.KIA_CEED>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_002_ACURA_RDX_3G ____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97320>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031f15b0>, flags=<tomllib._parser.Flags object at 0x7f56031f1e20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97320>,
    car_name=<CAR.ACURA_RDX_3G>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_161_SUBARU_CROSSTREK_HYBRID _______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dc470>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e0a000>, flags=<tomllib._parser.Flags object at 0x7fc518e08980>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dc470>,
    car_name=<CAR.SUBARU_CROSSTREK_HYBRID>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_049_HONDA_CIVIC _____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbd610>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed289f70>, flags=<tomllib._parser.Flags object at 0x7f25ed288920>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbd610>,
    car_name=<CAR.HONDA_CIVIC>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________________ TestCarInterfaces.test_car_interfaces_217_MOCK ________________
[gw6] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f3f1e944320>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f3f1e0a3470>, flags=<tomllib._parser.Flags object at 0x7f3f1e0a20c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f3f1e944320>,
    car_name=<CAR.MOCK>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______________ TestCarInterfaces.test_car_interfaces_105_KIA_EV6 _______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317bac60>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30deea20>, flags=<tomllib._parser.Flags object at 0x7f7b30dee0f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317bac60>,
    car_name=<CAR.KIA_EV6>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_003_AUDI_A3_MK3 _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97470>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031b5f10>, flags=<tomllib._parser.Flags object at 0x7f56031b4a70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97470>,
    car_name=<CAR.AUDI_A3_MK3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_050_HONDA_CIVIC_2022 __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbd250>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed288920>, flags=<tomllib._parser.Flags object at 0x7f25ed289a90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbd250>,
    car_name=<CAR.HONDA_CIVIC_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_162_SUBARU_FORESTER ___________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dd280>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e09a30>, flags=<tomllib._parser.Flags object at 0x7fc518e09a90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dd280>,
    car_name=<CAR.SUBARU_FORESTER>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_106_KIA_FORTE ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8bf0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30ded490>, flags=<tomllib._parser.Flags object at 0x7f7b30decbc0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8bf0>,
    car_name=<CAR.KIA_FORTE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_004_AUDI_Q2_MK1 _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b975c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031b5dc0>, flags=<tomllib._parser.Flags object at 0x7f56031b5a60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b975c0>,
    car_name=<CAR.AUDI_Q2_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_163_SUBARU_FORESTER_2022 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dda90>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb6780>, flags=<tomllib._parser.Flags object at 0x7fc518eb4140>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dda90>,
    car_name=<CAR.SUBARU_FORESTER_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_051_HONDA_CIVIC_BOSCH __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbd070>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed25d550>, flags=<tomllib._parser.Flags object at 0x7f25ed25d160>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbd070>,
    car_name=<CAR.HONDA_CIVIC_BOSCH>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_107_KIA_K5_2021 _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8920>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e339b0>, flags=<tomllib._parser.Flags object at 0x7f7b30e30050>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8920>,
    car_name=<CAR.KIA_K5_2021>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_005_AUDI_Q3_MK2 _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97710>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e25d0>, flags=<tomllib._parser.Flags object at 0x7f56031e05c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97710>,
    car_name=<CAR.AUDI_Q3_MK2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_164_SUBARU_FORESTER_HYBRID _______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df560>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d3c140>, flags=<tomllib._parser.Flags object at 0x7fc518d3ca40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df560>,
    car_name=<CAR.SUBARU_FORESTER_HYBRID>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_052_HONDA_CIVIC_BOSCH_DIESEL ______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbcce0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed06c170>, flags=<tomllib._parser.Flags object at 0x7f25ed06ca40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbcce0>,
    car_name=<CAR.HONDA_CIVIC_BOSCH_DIESEL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_108_KIA_K5_HEV_2020 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8560>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c8f410>, flags=<tomllib._parser.Flags object at 0x7f7b30c8c0e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8560>,
    car_name=<CAR.KIA_K5_HEV_2020>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_006_BUICK_LACROSSE ___________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97860>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603128ec0>, flags=<tomllib._parser.Flags object at 0x7f560312a9f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97860>,
    car_name=<CAR.BUICK_LACROSSE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_053_HONDA_CRV ______________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbc920>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed06fe90>, flags=<tomllib._parser.Flags object at 0x7f25ed25cbf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbc920>,
    car_name=<CAR.HONDA_CRV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestCarInterfaces.test_car_interfaces_165_SUBARU_FORESTER_PREGLOBAL ______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df6b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb66c0>, flags=<tomllib._parser.Flags object at 0x7fc518d3ffe0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df6b0>,
    car_name=<CAR.SUBARU_FORESTER_PREGLOBAL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_109_KIA_K8_HEV_1ST_GEN _________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8380>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e327e0>, flags=<tomllib._parser.Flags object at 0x7f7b30c8fd70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8380>,
    car_name=<CAR.KIA_K8_HEV_1ST_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_007_BUICK_REGAL _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b979b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e3c80>, flags=<tomllib._parser.Flags object at 0x7f56031b5bb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b979b0>,
    car_name=<CAR.BUICK_REGAL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_054_HONDA_CRV_5G ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbc740>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed106420>, flags=<tomllib._parser.Flags object at 0x7f25ed1073b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbc740>,
    car_name=<CAR.HONDA_CRV_5G>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_166_SUBARU_IMPREZA ___________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df800>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cda480>, flags=<tomllib._parser.Flags object at 0x7fc518cdb410>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df800>,
    car_name=<CAR.SUBARU_IMPREZA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_110_KIA_NIRO_EV _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8cb0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30cc3350>, flags=<tomllib._parser.Flags object at 0x7f7b30cc1700>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8cb0>,
    car_name=<CAR.KIA_NIRO_EV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_008_BYD_ATTO3 ______________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97b00>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56030a0b90>, flags=<tomllib._parser.Flags object at 0x7f56030a3410>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97b00>,
    car_name=<CAR.BYD_ATTO3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_055_HONDA_CRV_EU ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbc3b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed150e30>, flags=<tomllib._parser.Flags object at 0x7f25ed151250>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbc3b0>,
    car_name=<CAR.HONDA_CRV_EU>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_167_SUBARU_IMPREZA_2020 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df950>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bc22a0>, flags=<tomllib._parser.Flags object at 0x7fc518bc0fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df950>,
    car_name=<CAR.SUBARU_IMPREZA_2020>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_111_KIA_NIRO_EV_2ND_GEN _________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8e00>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c42960>, flags=<tomllib._parser.Flags object at 0x7f7b30c423c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8e00>,
    car_name=<CAR.KIA_NIRO_EV_2ND_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_009_CADILLAC_ATS ____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97c50>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602fce420>, flags=<tomllib._parser.Flags object at 0x7f5602fcc440>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97c50>,
    car_name=<CAR.CADILLAC_ATS>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_056_HONDA_CRV_HYBRID __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe030>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed1e5f70>, flags=<tomllib._parser.Flags object at 0x7f25ed1e59a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe030>,
    car_name=<CAR.HONDA_CRV_HYBRID>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_168_SUBARU_LEGACY ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dfaa0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518c59df0>, flags=<tomllib._parser.Flags object at 0x7fc518c598b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dfaa0>,
    car_name=<CAR.SUBARU_LEGACY>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_112_KIA_NIRO_HEV_2021 __________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8f50>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c01c40>, flags=<tomllib._parser.Flags object at 0x7f7b30c01700>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8f50>,
    car_name=<CAR.KIA_NIRO_HEV_2021>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_010_CADILLAC_ESCALADE __________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97d70>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f95f40>, flags=<tomllib._parser.Flags object at 0x7f5602f959d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97d70>,
    car_name=<CAR.CADILLAC_ESCALADE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______________ TestCarInterfaces.test_car_interfaces_057_HONDA_E _______________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe180>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecf9ccb0>, flags=<tomllib._parser.Flags object at 0x7f25ecf9d0d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe180>,
    car_name=<CAR.HONDA_E>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_169_SUBARU_LEGACY_PREGLOBAL _______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dfbf0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bb93d0>, flags=<tomllib._parser.Flags object at 0x7fc518bb9c10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dfbf0>,
    car_name=<CAR.SUBARU_LEGACY_PREGLOBAL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_113_KIA_NIRO_HEV_2ND_GEN ________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d90a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30b448f0>, flags=<tomllib._parser.Flags object at 0x7f7b30b44da0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d90a0>,
    car_name=<CAR.KIA_NIRO_HEV_2ND_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_011_CADILLAC_ESCALADE_ESV ________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97ec0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb1520>, flags=<tomllib._parser.Flags object at 0x7f5602eb1d90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97ec0>,
    car_name=<CAR.CADILLAC_ESCALADE_ESV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_058_HONDA_FIT ______________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe2d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecf9f8c0>, flags=<tomllib._parser.Flags object at 0x7f25ecf9fa40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe2d0>,
    car_name=<CAR.HONDA_FIT>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_170_SUBARU_OUTBACK ___________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dfd40>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bbb8c0>, flags=<tomllib._parser.Flags object at 0x7fc518bbbb90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dfd40>,
    car_name=<CAR.SUBARU_OUTBACK>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_114_KIA_NIRO_PHEV ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d91f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30b47a40>, flags=<tomllib._parser.Flags object at 0x7f7b30b47980>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d91f0>,
    car_name=<CAR.KIA_NIRO_PHEV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestCarInterfaces.test_car_interfaces_012_CADILLAC_ESCALADE_ESV_2019 _____
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8050>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb3860>, flags=<tomllib._parser.Flags object at 0x7f5602eb3b60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8050>,
    car_name=<CAR.CADILLAC_ESCALADE_ESV_2019>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_059_HONDA_FREED _____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe420>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed105d90>, flags=<tomllib._parser.Flags object at 0x7f25ed104c80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe420>,
    car_name=<CAR.HONDA_FREED>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_171_SUBARU_OUTBACK_2023 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dfe90>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cda600>, flags=<tomllib._parser.Flags object at 0x7fc518cda630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dfe90>,
    car_name=<CAR.SUBARU_OUTBACK_2023>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_115_KIA_NIRO_PHEV_2022 _________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9340>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30cc3740>, flags=<tomllib._parser.Flags object at 0x7f7b30cc12b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9340>,
    car_name=<CAR.KIA_NIRO_PHEV_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_172_SUBARU_OUTBACK_PREGLOBAL ______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604050>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cd8ef0>, flags=<tomllib._parser.Flags object at 0x7fc518cdbb30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604050>,
    car_name=<CAR.SUBARU_OUTBACK_PREGLOBAL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_013_CADILLAC_XT4 ____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb81a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56030a3710>, flags=<tomllib._parser.Flags object at 0x7f56030a3890>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb81a0>,
    car_name=<CAR.CADILLAC_XT4>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_060_HONDA_HRV ______________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe570>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed104050>, flags=<tomllib._parser.Flags object at 0x7f25ed105d00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe570>,
    car_name=<CAR.HONDA_HRV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_116_KIA_OPTIMA_G4 ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9490>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30cc0c20>, flags=<tomllib._parser.Flags object at 0x7f7b30cc17f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9490>,
    car_name=<CAR.KIA_OPTIMA_G4>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_014_CHEVROLET_BOLT_EUV _________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb82f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56030a11f0>, flags=<tomllib._parser.Flags object at 0x7f56030a2a20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb82f0>,
    car_name=<CAR.CHEVROLET_BOLT_EUV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_061_HONDA_HRV_3G ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe6c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed06d3d0>, flags=<tomllib._parser.Flags object at 0x7f25ed06c860>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe6c0>,
    car_name=<CAR.HONDA_HRV_3G>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___ TestCarInterfaces.test_car_interfaces_173_SUBARU_OUTBACK_PREGLOBAL_2018 ____
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604170>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d3ffb0>, flags=<tomllib._parser.Flags object at 0x7fc518d3d8b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604170>,
    car_name=<CAR.SUBARU_OUTBACK_PREGLOBAL_2018>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_117_KIA_OPTIMA_G4_FL __________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d95e0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c8cce0>, flags=<tomllib._parser.Flags object at 0x7f7b30c8d460>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d95e0>,
    car_name=<CAR.KIA_OPTIMA_G4_FL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_015_CHEVROLET_EQUINOX __________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8440>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603129b50>, flags=<tomllib._parser.Flags object at 0x7f5603128230>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8440>,
    car_name=<CAR.CHEVROLET_EQUINOX>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_062_HONDA_INSIGHT ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe810>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed1e50a0>, flags=<tomllib._parser.Flags object at 0x7f25ed1e5d90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe810>,
    car_name=<CAR.HONDA_INSIGHT>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_174_TESLA_MODEL_3 ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196042c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb7e00>, flags=<tomllib._parser.Flags object at 0x7fc518eb4f80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196042c0>,
    car_name=<CAR.TESLA_MODEL_3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_118_KIA_OPTIMA_H ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9730>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e339e0>, flags=<tomllib._parser.Flags object at 0x7f7b30e33440>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9730>,
    car_name=<CAR.KIA_OPTIMA_H>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_016_CHEVROLET_MALIBU __________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8590>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f97470>, flags=<tomllib._parser.Flags object at 0x7f5602f964b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8590>,
    car_name=<CAR.CHEVROLET_MALIBU>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_063_HONDA_ODYSSEY ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe960>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed1e4650>, flags=<tomllib._parser.Flags object at 0x7f25ed1e7ec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe960>,
    car_name=<CAR.HONDA_ODYSSEY>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_175_TESLA_MODEL_Y ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604410>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb63f0>, flags=<tomllib._parser.Flags object at 0x7fc518eb45f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604410>,
    car_name=<CAR.TESLA_MODEL_Y>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_119_KIA_OPTIMA_H_G4_FL _________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9880>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e32d80>, flags=<tomllib._parser.Flags object at 0x7f7b30e33200>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9880>,
    car_name=<CAR.KIA_OPTIMA_H_G4_FL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_017_CHEVROLET_SILVERADO _________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97dd0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560371db80>, flags=<tomllib._parser.Flags object at 0x7f5602fcd4f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97dd0>,
    car_name=<CAR.CHEVROLET_SILVERADO>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_064_HONDA_ODYSSEY_CHN __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbeab0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed25e2d0>, flags=<tomllib._parser.Flags object at 0x7f25ed25d400>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbeab0>,
    car_name=<CAR.HONDA_ODYSSEY_CHN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_176_TOYOTA_ALPHARD_TSS2 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604560>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e245f0>, flags=<tomllib._parser.Flags object at 0x7fc518e27860>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604560>,
    car_name=<CAR.TOYOTA_ALPHARD_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_120_KIA_SELTOS _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d99d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30ded0d0>, flags=<tomllib._parser.Flags object at 0x7f7b30deef00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d99d0>,
    car_name=<CAR.KIA_SELTOS>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_018_CHEVROLET_TRAVERSE _________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97c20>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e1970>, flags=<tomllib._parser.Flags object at 0x7f56031e3dd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97c20>,
    car_name=<CAR.CHEVROLET_TRAVERSE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_065_HONDA_PILOT _____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbec00>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed68b110>, flags=<tomllib._parser.Flags object at 0x7f25ed68a7b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbec00>,
    car_name=<CAR.HONDA_PILOT>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_177_TOYOTA_AVALON ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196046b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc519089250>, flags=<tomllib._parser.Flags object at 0x7fc519088680>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196046b0>,
    car_name=<CAR.TOYOTA_AVALON>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_121_KIA_SORENTO _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9b20>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dcefc0>, flags=<tomllib._parser.Flags object at 0x7f7b30dccef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9b20>,
    car_name=<CAR.KIA_SORENTO>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_019_CHEVROLET_VOLT ___________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97890>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560348bda0>, flags=<tomllib._parser.Flags object at 0x7f560348a870>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97890>,
    car_name=<CAR.CHEVROLET_VOLT>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_066_HONDA_RIDGELINE ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbed50>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecf9cc50>, flags=<tomllib._parser.Flags object at 0x7f25ecf9eb40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbed50>,
    car_name=<CAR.HONDA_RIDGELINE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_178_TOYOTA_AVALON_2019 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604800>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc519088a10>, flags=<tomllib._parser.Flags object at 0x7fc51908b7a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604800>,
    car_name=<CAR.TOYOTA_AVALON_2019>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_122_KIA_SORENTO_4TH_GEN _________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9c70>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e33320>, flags=<tomllib._parser.Flags object at 0x7f7b30e320f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9c70>,
    car_name=<CAR.KIA_SORENTO_4TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_020_CHEVROLET_VOLT_2019 _________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b974d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031f1190>, flags=<tomllib._parser.Flags object at 0x7f56031f0230>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b974d0>,
    car_name=<CAR.CHEVROLET_VOLT_2019>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_067_HYUNDAI_AZERA_6TH_GEN ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbeea0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed26e6f0>, flags=<tomllib._parser.Flags object at 0x7f25ed26d340>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbeea0>,
    car_name=<CAR.HYUNDAI_AZERA_6TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_179_TOYOTA_AVALON_TSS2 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604950>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc5190891c0>, flags=<tomllib._parser.Flags object at 0x7fc51908be60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604950>,
    car_name=<CAR.TOYOTA_AVALON_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_123_KIA_SORENTO_HEV_4TH_GEN _______
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9dc0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dcec60>, flags=<tomllib._parser.Flags object at 0x7f7b30dccec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9dc0>,
    car_name=<CAR.KIA_SORENTO_HEV_4TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_021_CHRYSLER_PACIFICA_2018 _______
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b972f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560348a840>, flags=<tomllib._parser.Flags object at 0x7f5603489490>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b972f0>,
    car_name=<CAR.CHRYSLER_PACIFICA_2018>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestCarInterfaces.test_car_interfaces_068_HYUNDAI_AZERA_HEV_6TH_GEN ______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbeff0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecfc2570>, flags=<tomllib._parser.Flags object at 0x7f25ecfc2ab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbeff0>,
    car_name=<CAR.HYUNDAI_AZERA_HEV_6TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_180_TOYOTA_CAMRY ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dfda0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc5189dd160>, flags=<tomllib._parser.Flags object at 0x7fc5189dca10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dfda0>,
    car_name=<CAR.TOYOTA_CAMRY>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_124_KIA_SPORTAGE_5TH_GEN ________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9f10>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30998bf0>, flags=<tomllib._parser.Flags object at 0x7f7b3099a6f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9f10>,
    car_name=<CAR.KIA_SPORTAGE_5TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___ TestCarInterfaces.test_car_interfaces_022_CHRYSLER_PACIFICA_2018_HYBRID ____
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb85f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602e37da0>, flags=<tomllib._parser.Flags object at 0x7f5602e37b30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb85f0>,
    car_name=<CAR.CHRYSLER_PACIFICA_2018_HYBRID>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_069_HYUNDAI_CUSTIN_1ST_GEN _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf140>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed13fe00>, flags=<tomllib._parser.Flags object at 0x7f25ed13cec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf140>,
    car_name=<CAR.HYUNDAI_CUSTIN_1ST_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_181_TOYOTA_CAMRY_TSS2 __________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dfbc0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d0da30>, flags=<tomllib._parser.Flags object at 0x7fc518d0d4c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dfbc0>,
    car_name=<CAR.TOYOTA_CAMRY_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_125_KIA_STINGER _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da060>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30bec200>, flags=<tomllib._parser.Flags object at 0x7f7b30becd10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da060>,
    car_name=<CAR.KIA_STINGER>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___ TestCarInterfaces.test_car_interfaces_023_CHRYSLER_PACIFICA_2019_HYBRID ____
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8350>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603025910>, flags=<tomllib._parser.Flags object at 0x7f56030253a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8350>,
    car_name=<CAR.CHRYSLER_PACIFICA_2019_HYBRID>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_070_HYUNDAI_ELANTRA ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf290>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed2f3b60>, flags=<tomllib._parser.Flags object at 0x7f25ed2f3e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf290>,
    car_name=<CAR.HYUNDAI_ELANTRA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_182_TOYOTA_CHR _____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df830>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e5bbc0>, flags=<tomllib._parser.Flags object at 0x7fc518e5bef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df830>,
    car_name=<CAR.TOYOTA_CHR>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_126_KIA_STINGER_2022 __________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317bafc0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30998c80>, flags=<tomllib._parser.Flags object at 0x7f7b30de4bc0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317bafc0>,
    car_name=<CAR.KIA_STINGER_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_024_CHRYSLER_PACIFICA_2020 _______
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8080>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031ebc80>, flags=<tomllib._parser.Flags object at 0x7f56031e8110>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8080>,
    car_name=<CAR.CHRYSLER_PACIFICA_2020>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_183_TOYOTA_CHR_TSS2 ___________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197ddbb0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc530c01dc0>, flags=<tomllib._parser.Flags object at 0x7fc530c01d00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197ddbb0>,
    car_name=<CAR.TOYOTA_CHR_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_071_HYUNDAI_ELANTRA_2021 ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edd97f20>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed06da30>, flags=<tomllib._parser.Flags object at 0x7f25ed06d9a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edd97f20>,
    car_name=<CAR.HYUNDAI_ELANTRA_2021>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_127_LEXUS_CTH ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317b91c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dcf140>, flags=<tomllib._parser.Flags object at 0x7f7b30dcf350>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317b91c0>,
    car_name=<CAR.LEXUS_CTH>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_025_COMMA_BODY _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8830>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603b090a0>, flags=<tomllib._parser.Flags object at 0x7f56037c3710>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8830>,
    car_name=<CAR.COMMA_BODY>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_072_HYUNDAI_ELANTRA_GT_I30 _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf440>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed635bb0>, flags=<tomllib._parser.Flags object at 0x7f25ed874530>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf440>,
    car_name=<CAR.HYUNDAI_ELANTRA_GT_I30>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_184_TOYOTA_COROLLA ___________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dd0d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc530c01dc0>, flags=<tomllib._parser.Flags object at 0x7fc519274fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dd0d0>,
    car_name=<CAR.TOYOTA_COROLLA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______________ TestCarInterfaces.test_car_interfaces_128_LEXUS_ES ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317bb920>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b317d8ef0>, flags=<tomllib._parser.Flags object at 0x7f7b317d9ac0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317bb920>,
    car_name=<CAR.LEXUS_ES>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_026_DODGE_DURANGO ____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8980>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603537440>, flags=<tomllib._parser.Flags object at 0x7f5603b3b9b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8980>,
    car_name=<CAR.DODGE_DURANGO>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_073_HYUNDAI_ELANTRA_HEV_2021 ______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf050>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed06f380>, flags=<tomllib._parser.Flags object at 0x7f25ed06e6f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf050>,
    car_name=<CAR.HYUNDAI_ELANTRA_HEV_2021>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_185_TOYOTA_COROLLA_TSS2 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197de390>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518eb4a10>, flags=<tomllib._parser.Flags object at 0x7fc518eb7500>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197de390>,
    car_name=<CAR.TOYOTA_COROLLA_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_129_LEXUS_ES_TSS2 ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da0c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e30050>, flags=<tomllib._parser.Flags object at 0x7f7b30e33da0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da0c0>,
    car_name=<CAR.LEXUS_ES_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_027_FORD_BRONCO_SPORT_MK1 ________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8ad0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560312a8d0>, flags=<tomllib._parser.Flags object at 0x7f56031283b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8ad0>,
    car_name=<CAR.FORD_BRONCO_SPORT_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_074_HYUNDAI_GENESIS ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbee70>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed6897f0>, flags=<tomllib._parser.Flags object at 0x7f25ed689910>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbee70>,
    car_name=<CAR.HYUNDAI_GENESIS>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_186_TOYOTA_HIGHLANDER __________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197ded80>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cd9730>, flags=<tomllib._parser.Flags object at 0x7fc518cd8200>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197ded80>,
    car_name=<CAR.TOYOTA_HIGHLANDER>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____________ TestCarInterfaces.test_car_interfaces_130_LEXUS_GS_F _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9d90>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b317d84d0>, flags=<tomllib._parser.Flags object at 0x7f7b317d8770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9d90>,
    car_name=<CAR.LEXUS_GS_F>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_028_FORD_ESCAPE_MK4 ___________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8c20>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602fcd130>, flags=<tomllib._parser.Flags object at 0x7f5602fcc8f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8c20>,
    car_name=<CAR.FORD_ESCAPE_MK4>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_187_TOYOTA_HIGHLANDER_TSS2 _______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197bac30>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cdbdd0>, flags=<tomllib._parser.Flags object at 0x7fc518cdb560>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197bac30>,
    car_name=<CAR.TOYOTA_HIGHLANDER_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_075_HYUNDAI_IONIQ ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbeae0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed66bb00>, flags=<tomllib._parser.Flags object at 0x7f25ed668470>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbeae0>,
    car_name=<CAR.HYUNDAI_IONIQ>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______________ TestCarInterfaces.test_car_interfaces_131_LEXUS_IS ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9a00>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3108ba10>, flags=<tomllib._parser.Flags object at 0x7f7b3108b830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9a00>,
    car_name=<CAR.LEXUS_IS>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_029_FORD_EXPLORER_MK6 __________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8d70>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560312a210>, flags=<tomllib._parser.Flags object at 0x7f560312ae10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8d70>,
    car_name=<CAR.FORD_EXPLORER_MK6>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_076_HYUNDAI_IONIQ_5 ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe720>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecf9e4b0>, flags=<tomllib._parser.Flags object at 0x7f25ecf9e330>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe720>,
    car_name=<CAR.HYUNDAI_IONIQ_5>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_188_TOYOTA_MIRAI ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196049b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bb9a30>, flags=<tomllib._parser.Flags object at 0x7fc518bb98e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196049b0>,
    car_name=<CAR.TOYOTA_MIRAI>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_132_LEXUS_IS_TSS2 ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9640>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3108b800>, flags=<tomllib._parser.Flags object at 0x7f7b310887d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9640>,
    car_name=<CAR.LEXUS_IS_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_030_FORD_FOCUS_MK4 ___________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb8ec0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f560312b590>, flags=<tomllib._parser.Flags object at 0x7f560312a240>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb8ec0>,
    car_name=<CAR.FORD_FOCUS_MK4>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_077_HYUNDAI_IONIQ_6 ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe540>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25eddbf260>, flags=<tomllib._parser.Flags object at 0x7f25eddbf350>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe540>,
    car_name=<CAR.HYUNDAI_IONIQ_6>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_189_TOYOTA_PRIUS ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604680>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e08ce0>, flags=<tomllib._parser.Flags object at 0x7fc518e0b680>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604680>,
    car_name=<CAR.TOYOTA_PRIUS>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_133_LEXUS_LC_TSS2 ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d9460>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3099a6f0>, flags=<tomllib._parser.Flags object at 0x7f7b30999d90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d9460>,
    car_name=<CAR.LEXUS_LC_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_031_FORD_F_150_LIGHTNING_MK1 ______
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9010>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602e36d20>, flags=<tomllib._parser.Flags object at 0x7f5602e34290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9010>,
    car_name=<CAR.FORD_F_150_LIGHTNING_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_078_HYUNDAI_IONIQ_EV_2020 ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbe1b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecfc2330>, flags=<tomllib._parser.Flags object at 0x7f25ecfc0590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbe1b0>,
    car_name=<CAR.HYUNDAI_IONIQ_EV_2020>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_190_TOYOTA_PRIUS_TSS2 __________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196042f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc5189ddcd0>, flags=<tomllib._parser.Flags object at 0x7fc5189dc2c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196042f0>,
    car_name=<CAR.TOYOTA_PRIUS_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='COMMA_BODY') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1812d50>, flags=<tomllib._parser.Flags object at 0x7f18b1810f20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______________ TestCarInterfaces.test_car_interfaces_134_LEXUS_NX ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d90d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30becce0>, flags=<tomllib._parser.Flags object at 0x7f7b30bef470>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d90d0>,
    car_name=<CAR.LEXUS_NX>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='CHRYSLER_PACIFICA_2018') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18702c0>, flags=<tomllib._parser.Flags object at 0x7f18b1870230>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_032_FORD_F_150_MK14 ___________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9160>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb03b0>, flags=<tomllib._parser.Flags object at 0x7f5602eb3050>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9160>,
    car_name=<CAR.FORD_F_150_MK14>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='CHRYSLER_PACIFICA_2020') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1812780>, flags=<tomllib._parser.Flags object at 0x7f18b1813020>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_079_HYUNDAI_IONIQ_EV_LTD ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbc500>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecfc2e70>, flags=<tomllib._parser.Flags object at 0x7f25ecfc2de0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbc500>,
    car_name=<CAR.HYUNDAI_IONIQ_EV_LTD>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_191_TOYOTA_PRIUS_V ___________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604a70>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bbba10>, flags=<tomllib._parser.Flags object at 0x7fc518bbacc0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604a70>,
    car_name=<CAR.TOYOTA_PRIUS_V>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='CHRYSLER_PACIFICA_2018_HYBRID') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1870c20>, flags=<tomllib._parser.Flags object at 0x7f18b1870a40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_135_LEXUS_NX_TSS2 ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d8d10>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30b44560>, flags=<tomllib._parser.Flags object at 0x7f7b30b46d50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d8d10>,
    car_name=<CAR.LEXUS_NX_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_033_FORD_MAVERICK_MK1 __________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb92b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb1a30>, flags=<tomllib._parser.Flags object at 0x7f5602eb2cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb92b0>,
    car_name=<CAR.FORD_MAVERICK_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='CHRYSLER_PACIFICA_2019_HYBRID') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18133b0>, flags=<tomllib._parser.Flags object at 0x7f18b1813560>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_080_HYUNDAI_IONIQ_HEV_2022 _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbca40>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed2f2c30>, flags=<tomllib._parser.Flags object at 0x7f25ed2f1490>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbca40>,
    car_name=<CAR.HYUNDAI_IONIQ_HEV_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____________ TestCarInterfaces.test_car_interfaces_192_TOYOTA_RAV4 _____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604bc0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e5a360>, flags=<tomllib._parser.Flags object at 0x7fc518e5a4b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604bc0>,
    car_name=<CAR.TOYOTA_RAV4>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__ TestFwFingerprint.test_blacklisted_ecus (car_model='JEEP_GRAND_CHEROKEE') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1872c00>, flags=<tomllib._parser.Flags object at 0x7f18b1872de0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______________ TestCarInterfaces.test_car_interfaces_136_LEXUS_RC ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317d82c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30de79e0>, flags=<tomllib._parser.Flags object at 0x7f7b30de5a90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317d82c0>,
    car_name=<CAR.LEXUS_RC>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='JEEP_GRAND_CHEROKEE_2019') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18122a0>, flags=<tomllib._parser.Flags object at 0x7f18b1811a90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='RAM_1500_5TH_GEN') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18728d0>, flags=<tomllib._parser.Flags object at 0x7f18b1871550>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestCarInterfaces.test_car_interfaces_034_FORD_MUSTANG_MACH_E_MK1 _______
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9400>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031eaae0>, flags=<tomllib._parser.Flags object at 0x7f56031ea660>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9400>,
    car_name=<CAR.FORD_MUSTANG_MACH_E_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_081_HYUNDAI_IONIQ_PHEV _________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbd310>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed182090>, flags=<tomllib._parser.Flags object at 0x7f25ed1817f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbd310>,
    car_name=<CAR.HYUNDAI_IONIQ_PHEV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestFwFingerprint.test_blacklisted_ecus (car_model='RAM_HD_5TH_GEN') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1812db0>, flags=<tomllib._parser.Flags object at 0x7f18b1813dd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_193_TOYOTA_RAV4H ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604d10>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518c95760>, flags=<tomllib._parser.Flags object at 0x7fc518c951f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604d10>,
    car_name=<CAR.TOYOTA_RAV4H>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestFwFingerprint.test_blacklisted_ecus (car_model='DODGE_DURANGO') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f07a0>, flags=<tomllib._parser.Flags object at 0x7f18b18f07d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______________ TestCarInterfaces.test_car_interfaces_137_LEXUS_RX ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da180>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c10530>, flags=<tomllib._parser.Flags object at 0x7f7b30c11460>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da180>,
    car_name=<CAR.LEXUS_RX>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_BRONCO_SPORT_MK1') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18728d0>, flags=<tomllib._parser.Flags object at 0x7f18b1872e10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_035_FORD_RANGER_MK2 ___________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9550>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f8db80>, flags=<tomllib._parser.Flags object at 0x7f5602f8d5e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9550>,
    car_name=<CAR.FORD_RANGER_MK2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_082_HYUNDAI_IONIQ_PHEV_2019 _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbdb50>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecdc3fe0>, flags=<tomllib._parser.Flags object at 0x7f25ecdc0b60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbdb50>,
    car_name=<CAR.HYUNDAI_IONIQ_PHEV_2019>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_194_TOYOTA_RAV4_PRIME __________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604e60>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518b37c80>, flags=<tomllib._parser.Flags object at 0x7fc518b37fb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604e60>,
    car_name=<CAR.TOYOTA_RAV4_PRIME>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_ESCAPE_MK4') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873b30>, flags=<tomllib._parser.Flags object at 0x7f18b1872600>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_EXPLORER_MK6') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1872b70>, flags=<tomllib._parser.Flags object at 0x7f18b1872030>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_138_LEXUS_RX_TSS2 ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da2d0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3085c200>, flags=<tomllib._parser.Flags object at 0x7f7b3085c290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da2d0>,
    car_name=<CAR.LEXUS_RX_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_F_150_MK14') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f24e0>, flags=<tomllib._parser.Flags object at 0x7f18b18f0dd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_036_GENESIS_G70 _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb96a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eac8c0>, flags=<tomllib._parser.Flags object at 0x7f5602eacd70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb96a0>,
    car_name=<CAR.GENESIS_G70>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_F_150_LIGHTNING_MK1') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873740>, flags=<tomllib._parser.Flags object at 0x7f18b1872c90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_195_TOYOTA_RAV4_TSS2 __________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519604fb0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bba060>, flags=<tomllib._parser.Flags object at 0x7fc518bbad50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519604fb0>,
    car_name=<CAR.TOYOTA_RAV4_TSS2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_MUSTANG_MACH_E_MK1') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f1f10>, flags=<tomllib._parser.Flags object at 0x7f18b18f3ec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_083_HYUNDAI_KONA ____________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf500>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed1e42c0>, flags=<tomllib._parser.Flags object at 0x7f25ed1e6e40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf500>,
    car_name=<CAR.HYUNDAI_KONA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_FOCUS_MK4') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873380>, flags=<tomllib._parser.Flags object at 0x7f18b1872ab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______________ TestCarInterfaces.test_car_interfaces_139_MAZDA_3 _______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da420>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b31531c10>, flags=<tomllib._parser.Flags object at 0x7f7b30b46690>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da420>,
    car_name=<CAR.MAZDA_3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_MAVERICK_MK1') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1813530>, flags=<tomllib._parser.Flags object at 0x7f18b1811a90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_037_GENESIS_G70_2020 __________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb97f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eb37a0>, flags=<tomllib._parser.Flags object at 0x7f5602eb03e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb97f0>,
    car_name=<CAR.GENESIS_G70_2020>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='FORD_RANGER_MK2') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1870920>, flags=<tomllib._parser.Flags object at 0x7f18b1870b00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_084_HYUNDAI_KONA_EV ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf650>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed2889b0>, flags=<tomllib._parser.Flags object at 0x7f25ed28b5f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf650>,
    car_name=<CAR.HYUNDAI_KONA_EV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_196_TOYOTA_RAV4_TSS2_2022 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605100>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cdb0e0>, flags=<tomllib._parser.Flags object at 0x7fc518cdbce0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605100>,
    car_name=<CAR.TOYOTA_RAV4_TSS2_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_ACCORD') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1813bc0>, flags=<tomllib._parser.Flags object at 0x7f18b1812870>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______________ TestCarInterfaces.test_car_interfaces_140_MAZDA_6 _______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da570>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c8df10>, flags=<tomllib._parser.Flags object at 0x7f7b30c8d430>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da570>,
    car_name=<CAR.MAZDA_6>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CIVIC') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873d10>, flags=<tomllib._parser.Flags object at 0x7f18b1872ab0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_038_GENESIS_G80 _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9940>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f95f70>, flags=<tomllib._parser.Flags object at 0x7f5602f96f60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9940>,
    car_name=<CAR.GENESIS_G80>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CIVIC_BOSCH') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18136b0>, flags=<tomllib._parser.Flags object at 0x7f18b18138f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_197_TOYOTA_RAV4_TSS2_2023 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605250>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc519068350>, flags=<tomllib._parser.Flags object at 0x7fc51906b590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605250>,
    car_name=<CAR.TOYOTA_RAV4_TSS2_2023>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_085_HYUNDAI_KONA_EV_2022 ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf7a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed06fb30>, flags=<tomllib._parser.Flags object at 0x7f25ed289730>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf7a0>,
    car_name=<CAR.HYUNDAI_KONA_EV_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CIVIC_BOSCH_DIESEL') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1872e10>, flags=<tomllib._parser.Flags object at 0x7f18b18daf90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____________ TestCarInterfaces.test_car_interfaces_141_MAZDA_CX5 ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da6c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dccbf0>, flags=<tomllib._parser.Flags object at 0x7f7b30dcc8c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da6c0>,
    car_name=<CAR.MAZDA_CX5>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CRV') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18d8980>, flags=<tomllib._parser.Flags object at 0x7f18b18dafc0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_039_GENESIS_G80_2ND_GEN_FL _______
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9a90>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56030a1a90>, flags=<tomllib._parser.Flags object at 0x7f5602fce5a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9a90>,
    car_name=<CAR.GENESIS_G80_2ND_GEN_FL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CRV_5G') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18db2c0>, flags=<tomllib._parser.Flags object at 0x7f18b18db260>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_198_TOYOTA_SIENNA ____________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196053a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bb9970>, flags=<tomllib._parser.Flags object at 0x7fc518bb9e80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196053a0>,
    car_name=<CAR.TOYOTA_SIENNA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestCarInterfaces.test_car_interfaces_086_HYUNDAI_KONA_EV_2ND_GEN _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf8f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecf9cce0>, flags=<tomllib._parser.Flags object at 0x7f25ecf9ed20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf8f0>,
    car_name=<CAR.HYUNDAI_KONA_EV_2ND_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CRV_EU') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f2780>, flags=<tomllib._parser.Flags object at 0x7f18b18f2510>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_142_MAZDA_CX5_2022 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da810>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dced80>, flags=<tomllib._parser.Flags object at 0x7f7b30dce2a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da810>,
    car_name=<CAR.MAZDA_CX5_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CRV_HYBRID') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f2e10>, flags=<tomllib._parser.Flags object at 0x7f18b18f2780>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_040_GENESIS_G90 _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9be0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e0bf0>, flags=<tomllib._parser.Flags object at 0x7f56031e10a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9be0>,
    car_name=<CAR.GENESIS_G90>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_FIT') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1872c60>, flags=<tomllib._parser.Flags object at 0x7f18b1873b30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_199_TOYOTA_SIENNA_4TH_GEN ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196054f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518cdbd40>, flags=<tomllib._parser.Flags object at 0x7fc518cd8dd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196054f0>,
    car_name=<CAR.TOYOTA_SIENNA_4TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_087_HYUNDAI_KONA_HEV __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbfa40>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed13ef60>, flags=<tomllib._parser.Flags object at 0x7f25ed13d160>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbfa40>,
    car_name=<CAR.HYUNDAI_KONA_HEV>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_FREED') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f0620>, flags=<tomllib._parser.Flags object at 0x7f18b18f2660>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____________ TestCarInterfaces.test_car_interfaces_143_MAZDA_CX9 ______________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317da960>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3099a9f0>, flags=<tomllib._parser.Flags object at 0x7f7b3099bb30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317da960>,
    car_name=<CAR.MAZDA_CX9>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_ODYSSEY') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1872b10>, flags=<tomllib._parser.Flags object at 0x7f18b1872c90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_ODYSSEY_CHN') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f3fe0>, flags=<tomllib._parser.Flags object at 0x7f18b18f2510>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestCarInterfaces.test_car_interfaces_041_GENESIS_GV60_EV_1ST_GEN _______
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9d30>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031e3e90>, flags=<tomllib._parser.Flags object at 0x7f56031e1820>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9d30>,
    car_name=<CAR.GENESIS_GV60_EV_1ST_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_200_VOLKSWAGEN_ARTEON_MK1 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605640>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d0ed50>, flags=<tomllib._parser.Flags object at 0x7fc518d0e840>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605640>,
    car_name=<CAR.VOLKSWAGEN_ARTEON_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_088_HYUNDAI_PALISADE __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbfb90>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecf9d370>, flags=<tomllib._parser.Flags object at 0x7f25ecf9d310>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbfb90>,
    car_name=<CAR.HYUNDAI_PALISADE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_PILOT') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1883a10>, flags=<tomllib._parser.Flags object at 0x7f18b1883e30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_144_MAZDA_CX9_2021 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317daab0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30de56a0>, flags=<tomllib._parser.Flags object at 0x7f7b30de6d50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317daab0>,
    car_name=<CAR.MAZDA_CX9_2021>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='ACURA_RDX') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18ad220>, flags=<tomllib._parser.Flags object at 0x7f18b18ae900>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='ACURA_RDX_3G') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1882db0>, flags=<tomllib._parser.Flags object at 0x7f18b1882d80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_042_GENESIS_GV70_1ST_GEN ________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9e80>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5603026720>, flags=<tomllib._parser.Flags object at 0x7f5603025f40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9e80>,
    car_name=<CAR.GENESIS_GV70_1ST_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestCarInterfaces.test_car_interfaces_089_HYUNDAI_SANTA_CRUZ_1ST_GEN _____
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbfce0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed2f3b60>, flags=<tomllib._parser.Flags object at 0x7f25ed2f2c30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbfce0>,
    car_name=<CAR.HYUNDAI_SANTA_CRUZ_1ST_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_201_VOLKSWAGEN_ATLAS_MK1 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605790>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc5189de5d0>, flags=<tomllib._parser.Flags object at 0x7fc5189deed0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605790>,
    car_name=<CAR.VOLKSWAGEN_ATLAS_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_RIDGELINE') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1883ec0>, flags=<tomllib._parser.Flags object at 0x7f18b1883830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_145_NISSAN_ALTIMA ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317dac00>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30cc2000>, flags=<tomllib._parser.Flags object at 0x7f7b30cc0e00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317dac00>,
    car_name=<CAR.NISSAN_ALTIMA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_INSIGHT') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1883e30>, flags=<tomllib._parser.Flags object at 0x7f18b18836e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestCarInterfaces.test_car_interfaces_043_GENESIS_GV70_ELECTRIFIED_1ST_GEN __
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603bb9fd0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f56031f3d10>, flags=<tomllib._parser.Flags object at 0x7f56031f0b90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603bb9fd0>,
    car_name=<CAR.GENESIS_GV70_ELECTRIFIED_1ST_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_HRV') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18adc70>, flags=<tomllib._parser.Flags object at 0x7f18b18ae1b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_090_HYUNDAI_SANTA_FE __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbfe30>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecdc28a0>, flags=<tomllib._parser.Flags object at 0x7f25ecdc0680>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbfe30>,
    car_name=<CAR.HYUNDAI_SANTA_FE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_202_VOLKSWAGEN_CADDY_MK3 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196058e0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518b35a00>, flags=<tomllib._parser.Flags object at 0x7fc518b36840>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196058e0>,
    car_name=<CAR.VOLKSWAGEN_CADDY_MK3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_HRV_3G') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1883350>, flags=<tomllib._parser.Flags object at 0x7f18b1883830>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_146_NISSAN_LEAF _____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317dad50>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b3085c620>, flags=<tomllib._parser.Flags object at 0x7f7b3085cdd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317dad50>,
    car_name=<CAR.NISSAN_LEAF>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='ACURA_ILX') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18ad220>, flags=<tomllib._parser.Flags object at 0x7f18b18af8f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_E') _________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18ae210>, flags=<tomllib._parser.Flags object at 0x7f18b18af440>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_044_GENESIS_GV80 ____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97fe0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602eafa70>, flags=<tomllib._parser.Flags object at 0x7f5602eae630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97fe0>,
    car_name=<CAR.GENESIS_GV80>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_091_HYUNDAI_SANTA_FE_2022 ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbff80>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed181040>, flags=<tomllib._parser.Flags object at 0x7f25ed180bc0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbff80>,
    car_name=<CAR.HYUNDAI_SANTA_FE_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_203_VOLKSWAGEN_CRAFTER_MK2 _______
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605a30>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518c95250>, flags=<tomllib._parser.Flags object at 0x7fc518c96f90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605a30>,
    car_name=<CAR.VOLKSWAGEN_CRAFTER_MK2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HONDA_CIVIC_2022') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18adc70>, flags=<tomllib._parser.Flags object at 0x7f18b18ad910>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_147_NISSAN_LEAF_IC ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317daea0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c11c40>, flags=<tomllib._parser.Flags object at 0x7f7b30c10620>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317daea0>,
    car_name=<CAR.NISSAN_LEAF_IC>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_AZERA_6TH_GEN') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18affb0>, flags=<tomllib._parser.Flags object at 0x7f18b18ae900>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_AZERA_HEV_6TH_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18adac0>, flags=<tomllib._parser.Flags object at 0x7f18b18aff20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____________ TestCarInterfaces.test_car_interfaces_045_GMC_ACADIA _____________
[gw2] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f5603b97830>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f5602f8ddf0>, flags=<tomllib._parser.Flags object at 0x7f5602f8e0c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f5603b97830>,
    car_name=<CAR.GMC_ACADIA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestCarInterfaces.test_car_interfaces_204_VOLKSWAGEN_GOLF_MK7 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605b80>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e584a0>, flags=<tomllib._parser.Flags object at 0x7fc518e58d70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605b80>,
    car_name=<CAR.VOLKSWAGEN_GOLF_MK7>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestCarInterfaces.test_car_interfaces_092_HYUNDAI_SANTA_FE_HEV_2022 ______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc110>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed2f0ec0>, flags=<tomllib._parser.Flags object at 0x7f25ed2f1dc0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc110>,
    car_name=<CAR.HYUNDAI_SANTA_FE_HEV_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_GENESIS') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18aff50>, flags=<tomllib._parser.Flags object at 0x7f18b18ae900>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18ad910>, flags=<tomllib._parser.Flags object at 0x7f18b18afd40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____________ TestCarInterfaces.test_car_interfaces_148_NISSAN_ROGUE ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317daff0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30bed5b0>, flags=<tomllib._parser.Flags object at 0x7f7b30cc24e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317daff0>,
    car_name=<CAR.NISSAN_ROGUE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_PHEV_2019') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f2510>, flags=<tomllib._parser.Flags object at 0x7f18b18aff20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_205_VOLKSWAGEN_JETTA_MK6 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605cd0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e75dc0>, flags=<tomllib._parser.Flags object at 0x7fc518e76660>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605cd0>,
    car_name=<CAR.VOLKSWAGEN_JETTA_MK6>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_PHEV') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18ae1b0>, flags=<tomllib._parser.Flags object at 0x7f18b18af8f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestCarInterfaces.test_car_interfaces_093_HYUNDAI_SANTA_FE_PHEV_2022 _____
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc260>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed13ab70>, flags=<tomllib._parser.Flags object at 0x7f25ed1385f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc260>,
    car_name=<CAR.HYUNDAI_SANTA_FE_PHEV_2022>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_EV_2020') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18adc70>, flags=<tomllib._parser.Flags object at 0x7f18b18afec0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_149_NISSAN_XTRAIL ____________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317db140>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30b8af90>, flags=<tomllib._parser.Flags object at 0x7f7b30b8a1b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317db140>,
    car_name=<CAR.NISSAN_XTRAIL>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_EV_LTD') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18affb0>, flags=<tomllib._parser.Flags object at 0x7f18b1883350>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_206_VOLKSWAGEN_JETTA_MK7 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605e20>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e5bf50>, flags=<tomllib._parser.Flags object at 0x7fc518e77e90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605e20>,
    car_name=<CAR.VOLKSWAGEN_JETTA_MK7>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_094_HYUNDAI_SONATA ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc3b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed13bf20>, flags=<tomllib._parser.Flags object at 0x7f25ed25fc50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc3b0>,
    car_name=<CAR.HYUNDAI_SONATA>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_HEV_2022') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18af6e0>, flags=<tomllib._parser.Flags object at 0x7f18b18acd10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_150_RAM_1500_5TH_GEN __________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317db290>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30b8b680>, flags=<tomllib._parser.Flags object at 0x7f7b30b8b9b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317db290>,
    car_name=<CAR.RAM_1500_5TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SONATA') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18d8a10>, flags=<tomllib._parser.Flags object at 0x7f18b18da270>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SONATA_LF') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f3620>, flags=<tomllib._parser.Flags object at 0x7f18b18f2d50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_TUCSON') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1813b60>, flags=<tomllib._parser.Flags object at 0x7f18b1872c30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_095_HYUNDAI_SONATA_HYBRID ________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc500>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ecfc1790>, flags=<tomllib._parser.Flags object at 0x7f25ecfc2b70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc500>,
    car_name=<CAR.HYUNDAI_SONATA_HYBRID>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_207_VOLKSWAGEN_PASSAT_MK8 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df320>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518e58b30>, flags=<tomllib._parser.Flags object at 0x7fc518e58a10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df320>,
    car_name=<CAR.VOLKSWAGEN_PASSAT_MK8>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SANTA_FE') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1881cd0>, flags=<tomllib._parser.Flags object at 0x7f18b1881e80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_151_RAM_HD_5TH_GEN ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317db3e0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30bed160>, flags=<tomllib._parser.Flags object at 0x7f7b30bece30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317db3e0>,
    car_name=<CAR.RAM_HD_5TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SANTA_FE_2022') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188bfb0>, flags=<tomllib._parser.Flags object at 0x7f18b188b530>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SANTA_FE_HEV_2022') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18da720>, flags=<tomllib._parser.Flags object at 0x7f18b18da480>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_208_VOLKSWAGEN_PASSAT_NMS ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197dcce0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518c96840>, flags=<tomllib._parser.Flags object at 0x7fc518c95130>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197dcce0>,
    car_name=<CAR.VOLKSWAGEN_PASSAT_NMS>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_096_HYUNDAI_SONATA_LF __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc650>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed182990>, flags=<tomllib._parser.Flags object at 0x7f25ed1815e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc650>,
    car_name=<CAR.HYUNDAI_SONATA_LF>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SANTA_FE_PHEV_2022') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f23f0>, flags=<tomllib._parser.Flags object at 0x7f18b18f1e20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___________ TestCarInterfaces.test_car_interfaces_152_SEAT_ATECA_MK1 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317db530>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c11dc0>, flags=<tomllib._parser.Flags object at 0x7f7b30c10200>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317db530>,
    car_name=<CAR.SEAT_ATECA_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_CUSTIN_1ST_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1812d50>, flags=<tomllib._parser.Flags object at 0x7f18b1813770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_STINGER') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18af320>, flags=<tomllib._parser.Flags object at 0x7f18b18acda0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_209_VOLKSWAGEN_POLO_MK6 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5197df9b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d0c7a0>, flags=<tomllib._parser.Flags object at 0x7fc518d0c770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5197df9b0>,
    car_name=<CAR.VOLKSWAGEN_POLO_MK6>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_097_HYUNDAI_STARIA_4TH_GEN _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc7a0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed13fc80>, flags=<tomllib._parser.Flags object at 0x7f25ed13f4d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc7a0>,
    car_name=<CAR.HYUNDAI_STARIA_4TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_STINGER_2022') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18acd10>, flags=<tomllib._parser.Flags object at 0x7f18b18ae120>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_153_SKODA_FABIA_MK4 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317bbb60>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30999160>, flags=<tomllib._parser.Flags object at 0x7f7b3099bbf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317bbb60>,
    car_name=<CAR.SKODA_FABIA_MK4>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_PALISADE') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1882840>, flags=<tomllib._parser.Flags object at 0x7f18b18837a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_VELOSTER') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18dbda0>, flags=<tomllib._parser.Flags object at 0x7f18b18d8800>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_210_VOLKSWAGEN_SHARAN_MK2 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605e80>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d0c350>, flags=<tomllib._parser.Flags object at 0x7fc518d0d6d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605e80>,
    car_name=<CAR.VOLKSWAGEN_SHARAN_MK2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
___________ TestCarInterfaces.test_car_interfaces_098_HYUNDAI_TUCSON ___________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25edddc8f0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed6890d0>, flags=<tomllib._parser.Flags object at 0x7f25ed688b60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25edddc8f0>,
    car_name=<CAR.HYUNDAI_TUCSON>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_154_SKODA_KAMIQ_MK1 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317db590>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30e33320>, flags=<tomllib._parser.Flags object at 0x7f7b30e303e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317db590>,
    car_name=<CAR.SKODA_KAMIQ_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_G70') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188ad80>, flags=<tomllib._parser.Flags object at 0x7f18b188bfb0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_G70_2020') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18dbda0>, flags=<tomllib._parser.Flags object at 0x7f18b18da060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_G80') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18af110>, flags=<tomllib._parser.Flags object at 0x7f18b18af500>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_211_VOLKSWAGEN_TAOS_MK1 _________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605a90>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bba540>, flags=<tomllib._parser.Flags object at 0x7fc518bbb2f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605a90>,
    car_name=<CAR.VOLKSWAGEN_TAOS_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestCarInterfaces.test_car_interfaces_099_HYUNDAI_TUCSON_4TH_GEN _______
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbfe60>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed7fbce0>, flags=<tomllib._parser.Flags object at 0x7f25ed7fbe30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbfe60>,
    car_name=<CAR.HYUNDAI_TUCSON_4TH_GEN>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_G80_2ND_GEN_FL') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18db0b0>, flags=<tomllib._parser.Flags object at 0x7f18b18da060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_155_SKODA_KAROQ_MK1 ___________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317db260>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30dcd040>, flags=<tomllib._parser.Flags object at 0x7f7b30dcc8c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317db260>,
    car_name=<CAR.SKODA_KAROQ_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
______ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_G90') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f3ef0>, flags=<tomllib._parser.Flags object at 0x7f18b18ac290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_KONA') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18d9850>, flags=<tomllib._parser.Flags object at 0x7f18b18d9ca0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_212_VOLKSWAGEN_TCROSS_MK1 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc5196058b0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518d0f4d0>, flags=<tomllib._parser.Flags object at 0x7fc518d0e420>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc5196058b0>,
    car_name=<CAR.VOLKSWAGEN_TCROSS_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
__________ TestCarInterfaces.test_car_interfaces_100_HYUNDAI_VELOSTER __________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbfaa0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed151a90>, flags=<tomllib._parser.Flags object at 0x7f25ed151760>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbfaa0>,
    car_name=<CAR.HYUNDAI_VELOSTER>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
________ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_CEED') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873f50>, flags=<tomllib._parser.Flags object at 0x7f18b1873590>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__________ TestCarInterfaces.test_car_interfaces_156_SKODA_KODIAQ_MK1 __________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317daed0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b30c8d850>, flags=<tomllib._parser.Flags object at 0x7f7b30c8d4c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317daed0>,
    car_name=<CAR.SKODA_KODIAQ_MK1>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_FORTE') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f0410>, flags=<tomllib._parser.Flags object at 0x7f18b18f3ef0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_K5_2021') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1813c80>, flags=<tomllib._parser.Flags object at 0x7f18b1812d50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestCarInterfaces.test_car_interfaces_213_VOLKSWAGEN_TIGUAN_MK2 ________
[gw5] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7fc519605520>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7fc518bc35c0>, flags=<tomllib._parser.Flags object at 0x7fc518bc3170>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7fc519605520>,
    car_name=<CAR.VOLKSWAGEN_TIGUAN_MK2>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_K5_HEV_2020') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18d8800>, flags=<tomllib._parser.Flags object at 0x7f18b18d9ca0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestCarInterfaces.test_car_interfaces_101_JEEP_GRAND_CHEROKEE _________
[gw3] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f25eddbf8c0>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f25ed26ea50>, flags=<tomllib._parser.Flags object at 0x7f25ed25dd30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f25eddbf8c0>,
    car_name=<CAR.JEEP_GRAND_CHEROKEE>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
_________ TestCarInterfaces.test_car_interfaces_157_SKODA_OCTAVIA_MK3 __________
[gw4] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

a = (<opendbc.car.tests.test_car_interfaces.TestCarInterfaces object at 0x7f7b317dab10>,)

    @wraps(func)
    def standalone_func(*a):
>       return func(*(a + p.args), **p.kwargs)

.venv/lib/python3.12/site-packages/parameterized/parameterized.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/tests/test_car_interfaces.py:52: in test_car_interfaces
    @settings(max_examples=MAX_EXAMPLES, deadline=None,
opendbc/car/tests/test_car_interfaces.py:60: in test_car_interfaces
    car_params = CarInterface.get_params(car_name, args['fingerprints'], args['car_fw'],
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f7b31089e80>, flags=<tomllib._parser.Flags object at 0x7f7b31089370>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_car_interfaces(
    data=data(...),
    self=<opendbc.car.tests.test_car_interfaces.TestCarInterfaces at 0x7f7b317dab10>,
    car_name=<CAR.SKODA_OCTAVIA_MK3>,
)
Draw 1: {'fingerprints': {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}, 'car_fw': [], 'experimental_long': False}
____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_KONA_EV') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1871f10>, flags=<tomllib._parser.Flags object at 0x7f18b1873770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_KONA_EV_2022') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18db0b0>, flags=<tomllib._parser.Flags object at 0x7f18b18ac290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_KONA_EV_2ND_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1cdc680>, flags=<tomllib._parser.Flags object at 0x7f18b17bd970>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_NIRO_EV') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bc500>, flags=<tomllib._parser.Flags object at 0x7f18b18bfa10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_NIRO_EV_2ND_GEN') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1812d50>, flags=<tomllib._parser.Flags object at 0x7f18b1813b60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_NIRO_PHEV') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bd4f0>, flags=<tomllib._parser.Flags object at 0x7f18b17bf8c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_NIRO_PHEV_2022') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18be570>, flags=<tomllib._parser.Flags object at 0x7f18b18bef00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_NIRO_HEV_2021') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873050>, flags=<tomllib._parser.Flags object at 0x7f18b1873770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_SELTOS') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bc500>, flags=<tomllib._parser.Flags object at 0x7f18b18bef00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_OPTIMA_G4') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1888200>, flags=<tomllib._parser.Flags object at 0x7f18b18d9ca0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_OPTIMA_G4_FL') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bd4f0>, flags=<tomllib._parser.Flags object at 0x7f18b17bfa40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_OPTIMA_H') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17beb10>, flags=<tomllib._parser.Flags object at 0x7f18b17bd580>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_OPTIMA_H_G4_FL') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b177d9d0>, flags=<tomllib._parser.Flags object at 0x7f18b177dee0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_ELANTRA') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b177e0c0>, flags=<tomllib._parser.Flags object at 0x7f18b177f920>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_ELANTRA_GT_I30') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1751af0>, flags=<tomllib._parser.Flags object at 0x7f18b1750650>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_ELANTRA_2021') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bf7a0>, flags=<tomllib._parser.Flags object at 0x7f18b17bd700>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_ELANTRA_HEV_2021') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bd670>, flags=<tomllib._parser.Flags object at 0x7f18b17bef60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_KONA_HEV') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b177e450>, flags=<tomllib._parser.Flags object at 0x7f18b177e0c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SONATA_HYBRID') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bd580>, flags=<tomllib._parser.Flags object at 0x7f18b17bd640>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_SORENTO') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bf890>, flags=<tomllib._parser.Flags object at 0x7f18b177e450>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_EV6') _________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18ac290>, flags=<tomllib._parser.Flags object at 0x7f18b17bd4f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_5') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18be570>, flags=<tomllib._parser.Flags object at 0x7f18b18bfa10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_IONIQ_6') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1871100>, flags=<tomllib._parser.Flags object at 0x7f18b18739e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_TUCSON_4TH_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18c9760>, flags=<tomllib._parser.Flags object at 0x7f18b18c9c70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_SANTA_CRUZ_1ST_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873470>, flags=<tomllib._parser.Flags object at 0x7f18b1813d40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_SPORTAGE_5TH_GEN') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1882ea0>, flags=<tomllib._parser.Flags object at 0x7f18b1882e70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_GV70_1ST_GEN') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18739e0>, flags=<tomllib._parser.Flags object at 0x7f18b1870800>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_GV70_ELECTRIFIED_1ST_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1812270>, flags=<tomllib._parser.Flags object at 0x7f18b1812d50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_GV60_EV_1ST_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18adb80>, flags=<tomllib._parser.Flags object at 0x7f18b18addf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_SORENTO_4TH_GEN') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188bf80>, flags=<tomllib._parser.Flags object at 0x7f18b188bad0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_SORENTO_HEV_4TH_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873590>, flags=<tomllib._parser.Flags object at 0x7f18b1873290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_NIRO_HEV_2ND_GEN') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188b5c0>, flags=<tomllib._parser.Flags object at 0x7f18b188b860>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='GENESIS_GV80') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188a630>, flags=<tomllib._parser.Flags object at 0x7f18b188b8f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_CARNIVAL_4TH_GEN') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f3800>, flags=<tomllib._parser.Flags object at 0x7f18b18f3d70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='KIA_K8_HEV_1ST_GEN') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188b860>, flags=<tomllib._parser.Flags object at 0x7f18b188a630>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='HYUNDAI_STARIA_4TH_GEN') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18dba70>, flags=<tomllib._parser.Flags object at 0x7f18b18d8770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='MAZDA_CX5_2022') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f2300>, flags=<tomllib._parser.Flags object at 0x7f18b18f1fa0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestFwFingerprint.test_blacklisted_ecus (car_model='MAZDA_CX5') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bf710>, flags=<tomllib._parser.Flags object at 0x7f18b18832f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestFwFingerprint.test_blacklisted_ecus (car_model='MAZDA_CX9') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bdca0>, flags=<tomllib._parser.Flags object at 0x7f18b18bfb60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='MAZDA_3') _________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bec90>, flags=<tomllib._parser.Flags object at 0x7f18b17bd880>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='MAZDA_6') _________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f2300>, flags=<tomllib._parser.Flags object at 0x7f18b18f1190>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='MAZDA_CX9_2021') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18812b0>, flags=<tomllib._parser.Flags object at 0x7f18b18832f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='NISSAN_ALTIMA') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1752750>, flags=<tomllib._parser.Flags object at 0x7f18b1752480>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='NISSAN_LEAF') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bf710>, flags=<tomllib._parser.Flags object at 0x7f18b17bfd40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='NISSAN_LEAF_IC') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1751a30>, flags=<tomllib._parser.Flags object at 0x7f18b1752480>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='NISSAN_XTRAIL') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18da8d0>, flags=<tomllib._parser.Flags object at 0x7f18b188af90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_ASCENT') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bd880>, flags=<tomllib._parser.Flags object at 0x7f18b17bfd40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_ASCENT_2023') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b178bc80>, flags=<tomllib._parser.Flags object at 0x7f18b178b950>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_LEGACY') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17c90a0>, flags=<tomllib._parser.Flags object at 0x7f18b17c8410>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_IMPREZA') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17cb800>, flags=<tomllib._parser.Flags object at 0x7f18b17c9e80>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_IMPREZA_2020') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b178b830>, flags=<tomllib._parser.Flags object at 0x7f18b178b230>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_CROSSTREK_HYBRID') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b178b3e0>, flags=<tomllib._parser.Flags object at 0x7f18b188af90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_FORESTER') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17c9040>, flags=<tomllib._parser.Flags object at 0x7f18b17c9790>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_FORESTER_HYBRID') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1752750>, flags=<tomllib._parser.Flags object at 0x7f18b17bfd40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_FORESTER_PREGLOBAL') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17c9190>, flags=<tomllib._parser.Flags object at 0x7f18b17c95e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_LEGACY_PREGLOBAL') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b188b170>, flags=<tomllib._parser.Flags object at 0x7f18b188b860>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_OUTBACK_PREGLOBAL') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a0d10>, flags=<tomllib._parser.Flags object at 0x7f18b17a1cd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_OUTBACK_PREGLOBAL_2018') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a2ed0>, flags=<tomllib._parser.Flags object at 0x7f18b17a31d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_OUTBACK') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17c9e80>, flags=<tomllib._parser.Flags object at 0x7f18b17c9f40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_FORESTER_2022') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b178bce0>, flags=<tomllib._parser.Flags object at 0x7f18b178b3e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='SUBARU_OUTBACK_2023') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17c96a0>, flags=<tomllib._parser.Flags object at 0x7f18b17c9040>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='TESLA_MODEL_3') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17d3800>, flags=<tomllib._parser.Flags object at 0x7f18b17d2060>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='TESLA_MODEL_Y') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a0e00>, flags=<tomllib._parser.Flags object at 0x7f18b17a3380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_AVALON') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a2240>, flags=<tomllib._parser.Flags object at 0x7f18b17a3380>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_AVALON_2019') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17d2ae0>, flags=<tomllib._parser.Flags object at 0x7f18b17d2750>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_AVALON_TSS2') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a2240>, flags=<tomllib._parser.Flags object at 0x7f18b17a2f00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_CAMRY') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b177e5d0>, flags=<tomllib._parser.Flags object at 0x7f18b177da00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_CAMRY_TSS2') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b177db80>, flags=<tomllib._parser.Flags object at 0x7f18b177fb60>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_CHR') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18adac0>, flags=<tomllib._parser.Flags object at 0x7f18b18ac290>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_CHR_TSS2') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bf110>, flags=<tomllib._parser.Flags object at 0x7f18b172de50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_COROLLA') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b172de20>, flags=<tomllib._parser.Flags object at 0x7f18b172e6c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_COROLLA_TSS2') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bddf0>, flags=<tomllib._parser.Flags object at 0x7f18b18beb70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_HIGHLANDER') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18830e0>, flags=<tomllib._parser.Flags object at 0x7f18b17bf770>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_HIGHLANDER_TSS2') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bf4d0>, flags=<tomllib._parser.Flags object at 0x7f18b18be990>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_IS') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f24e0>, flags=<tomllib._parser.Flags object at 0x7f18b18da6f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_IS_TSS2') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1870aa0>, flags=<tomllib._parser.Flags object at 0x7f18b17bea50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_PRIUS') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f27b0>, flags=<tomllib._parser.Flags object at 0x7f18b18f3d70>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_PRIUS_V') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17534a0>, flags=<tomllib._parser.Flags object at 0x7f18b17505f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_RAV4') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18beb70>, flags=<tomllib._parser.Flags object at 0x7f18b18bc470>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_RAV4H') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17d3770>, flags=<tomllib._parser.Flags object at 0x7f18b17d2840>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_RAV4_PRIME') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18bf110>, flags=<tomllib._parser.Flags object at 0x7f18b18be9c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_RAV4_TSS2') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17d2960>, flags=<tomllib._parser.Flags object at 0x7f18b17d2000>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_RAV4_TSS2_2022') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a2d20>, flags=<tomllib._parser.Flags object at 0x7f18b17a33e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_RAV4_TSS2_2023') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17bede0>, flags=<tomllib._parser.Flags object at 0x7f18b17534a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_SIENNA') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a27b0>, flags=<tomllib._parser.Flags object at 0x7f18b17a2cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_SIENNA_4TH_GEN') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1788200>, flags=<tomllib._parser.Flags object at 0x7f18b178b950>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_CTH') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a3e30>, flags=<tomllib._parser.Flags object at 0x7f18b17a2cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_ES_TSS2') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b178b8c0>, flags=<tomllib._parser.Flags object at 0x7f18b178b950>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_ES') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1873290>, flags=<tomllib._parser.Flags object at 0x7f18b16d2a50>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_______ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_GS_F') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1757aa0>, flags=<tomllib._parser.Flags object at 0x7f18b1755a90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_NX') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d0c80>, flags=<tomllib._parser.Flags object at 0x7f18b16d1b20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_NX_TSS2') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1755f40>, flags=<tomllib._parser.Flags object at 0x7f18b17552b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_LC_TSS2') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d2300>, flags=<tomllib._parser.Flags object at 0x7f18b16d1d90>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_RC') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1757dd0>, flags=<tomllib._parser.Flags object at 0x7f18b1756b40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

________ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_RX') ________
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1753710>, flags=<tomllib._parser.Flags object at 0x7f18b17a27b0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='LEXUS_RX_TSS2') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17566f0>, flags=<tomllib._parser.Flags object at 0x7f18b1756720>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_PRIUS_TSS2') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18da6f0>, flags=<tomllib._parser.Flags object at 0x7f18b178b8c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_MIRAI') ______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1754620>, flags=<tomllib._parser.Flags object at 0x7f18b1756720>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='TOYOTA_ALPHARD_TSS2') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d24e0>, flags=<tomllib._parser.Flags object at 0x7f18b16d19a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_ARTEON_MK1') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d3bf0>, flags=<tomllib._parser.Flags object at 0x7f18b16d3140>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_ATLAS_MK1') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16525d0>, flags=<tomllib._parser.Flags object at 0x7f18b16534d0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_CADDY_MK3') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17899a0>, flags=<tomllib._parser.Flags object at 0x7f18b16537a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_CRAFTER_MK2') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1652990>, flags=<tomllib._parser.Flags object at 0x7f18b1652c30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_GOLF_MK7') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1652210>, flags=<tomllib._parser.Flags object at 0x7f18b1652bd0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_JETTA_MK6') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d3e90>, flags=<tomllib._parser.Flags object at 0x7f18b16d2300>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_JETTA_MK7') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16aa8a0>, flags=<tomllib._parser.Flags object at 0x7f18b16abb30>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_PASSAT_MK8') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d0650>, flags=<tomllib._parser.Flags object at 0x7f18b16d24e0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_PASSAT_NMS') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d18e0>, flags=<tomllib._parser.Flags object at 0x7f18b16d3140>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_POLO_MK6') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1652f60>, flags=<tomllib._parser.Flags object at 0x7f18b1652cf0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_SHARAN_MK2') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16d0b90>, flags=<tomllib._parser.Flags object at 0x7f18b16d1b20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_TAOS_MK1') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b172dc10>, flags=<tomllib._parser.Flags object at 0x7f18b172df40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_TCROSS_MK1') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1752330>, flags=<tomllib._parser.Flags object at 0x7f18b1753e00>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_TIGUAN_MK2') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b172f350>, flags=<tomllib._parser.Flags object at 0x7f18b172dc10>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_TOURAN_MK2') __
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1751d90>, flags=<tomllib._parser.Flags object at 0x7f18b1751af0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_TRANSPORTER_T61') _
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b174ffe0>, flags=<tomllib._parser.Flags object at 0x7f18b17d1c40>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

__ TestFwFingerprint.test_blacklisted_ecus (car_model='VOLKSWAGEN_TROC_MK1') ___
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1753530>, flags=<tomllib._parser.Flags object at 0x7f18b17538f0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='AUDI_A3_MK3') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17d1d60>, flags=<tomllib._parser.Flags object at 0x7f18b17d3740>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='AUDI_Q2_MK1') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17517c0>, flags=<tomllib._parser.Flags object at 0x7f18b1753800>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

______ TestFwFingerprint.test_blacklisted_ecus (car_model='AUDI_Q3_MK2') _______
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b177f7a0>, flags=<tomllib._parser.Flags object at 0x7f18b177f4a0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

_____ TestFwFingerprint.test_blacklisted_ecus (car_model='SEAT_ATECA_MK1') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b172df40>, flags=<tomllib._parser.Flags object at 0x7f18b172e810>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='SKODA_FABIA_MK4') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b18f24b0>, flags=<tomllib._parser.Flags object at 0x7f18b17d3740>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='SKODA_KAMIQ_MK1') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1652840>, flags=<tomllib._parser.Flags object at 0x7f18b1652300>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='SKODA_KAROQ_MK1') _____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17a1850>, flags=<tomllib._parser.Flags object at 0x7f18b17a3980>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='SKODA_KODIAQ_MK1') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b1751af0>, flags=<tomllib._parser.Flags object at 0x7f18b1753800>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

___ TestFwFingerprint.test_blacklisted_ecus (car_model='SKODA_OCTAVIA_MK3') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b17546b0>, flags=<tomllib._parser.Flags object at 0x7f18b17578c0>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

____ TestFwFingerprint.test_blacklisted_ecus (car_model='SKODA_SUPERB_MK3') ____
[gw7] linux -- Python 3.12.0 /mnt/c/Users/AbhishekMitra/Documents/GitHub/qzwf/openpilot/opendbc_repo/.venv/bin/python

self = <opendbc.car.tests.test_fw_fingerprint.TestFwFingerprint object at 0x7f18b1dadac0>
subtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x7f18c9b27770>, suspend_capture_ctx=<bound method ...ed' _in_suspended=False> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_blacklisted_ecus>>)

    def test_blacklisted_ecus(self, subtests):
      blacklisted_addrs = (0x7c4, 0x7d0)  # includes A/C ecu and an unknown ecu
      for car_model, ecus in FW_VERSIONS.items():
        with subtests.test(car_model=car_model.value):
>         CP = interfaces[car_model][0].get_non_essential_params(car_model)

opendbc/car/tests/test_fw_fingerprint.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
opendbc/car/interfaces.py:115: in get_non_essential_params
    return cls.get_params(candidate, gen_empty_fingerprint(), list(), False, False)
opendbc/car/interfaces.py:120: in get_params
    ret = CarInterfaceBase.get_std_params(candidate)
opendbc/car/interfaces.py:178: in get_std_params
    ret.maxLateralAccel = get_torque_params()[candidate]['MAX_LAT_ACCEL_MEASURED']
opendbc/car/interfaces.py:62: in get_torque_params
    params = tomllib.load(f)
/usr/local/lib/python3.12/tomllib/_parser.py:66: in load
    return loads(s, parse_float=parse_float)
/usr/local/lib/python3.12/tomllib/_parser.py:102: in loads
    pos = key_value_rule(src, pos, out, header, parse_float)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = 'legend = ["LAT_ACCEL_FACTOR", "MAX_LAT_ACCEL_MEASURED", "FRICTION"]\n"ACURA_ILX" = [1.524988973896102, 0.519011053086....0001565939459098, 0.1465626137072916]\n"BYD_QZJ05" = [1.51, 1.6, 0.132]\n"BYD_ATTO3" = [3.172929, 2.713050, 0.096019]'
pos = 6375
out = Output(data=<tomllib._parser.NestedDict object at 0x7f18b16abe00>, flags=<tomllib._parser.Flags object at 0x7f18b16abc20>)
header = (), parse_float = <class 'float'>

    def key_value_rule(
        src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat
    ) -> Pos:
        pos, key, value = parse_key_value_pair(src, pos, parse_float)
        key_parent, key_stem = key[:-1], key[-1]
        abs_key_parent = header + key_parent
    
        relative_path_cont_keys = (header + key[:i] for i in range(1, len(key)))
        for cont_key in relative_path_cont_keys:
            # Check that dotted key syntax does not redefine an existing table
            if out.flags.is_(cont_key, Flags.EXPLICIT_NEST):
                raise suffixed_err(src, pos, f"Cannot redefine namespace {cont_key}")
            # Containers in the relative path can't be opened with the table syntax or
            # dotted key/value syntax in following table sections.
            out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)
    
        if out.flags.is_(abs_key_parent, Flags.FROZEN):
            raise suffixed_err(
                src, pos, f"Cannot mutate immutable namespace {abs_key_parent}"
            )
    
        try:
            nest = out.data.get_or_create_nest(abs_key_parent)
        except KeyError:
            raise suffixed_err(src, pos, "Cannot overwrite a value") from None
        if key_stem in nest:
>           raise suffixed_err(src, pos, "Cannot overwrite a value")
E           tomllib.TOMLDecodeError: Cannot overwrite a value (at line 84, column 33)

/usr/local/lib/python3.12/tomllib/_parser.py:349: TOMLDecodeError
------------------------------ Captured log call -------------------------------

============================= slowest 10 durations =============================
11.89s call     opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
2.41s call     opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_fw_version_lists
1.32s call     opendbc/car/volkswagen/tests/test_volkswagen.py::TestVolkswagenPlatformConfigs::test_custom_fuzzy_fingerprinting
0.66s call     opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_102_JEEP_GRAND_CHEROKEE_2019
0.66s call     opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_214_VOLKSWAGEN_TOURAN_MK2
0.66s call     opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_158_SKODA_SUPERB_MK3
0.65s call     opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_046_GMC_YUKON
0.64s call     opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_000_ACURA_ILX
0.54s call     opendbc/can/tests/test_dbc_parser.py::TestDBCParser::test_parse_all_dbcs
0.54s call     opendbc/car/ford/tests/test_ford.py::TestFordFW::test_platform_codes_fuzzy_fw
=========================== short test summary info ============================
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_046_GMC_YUKON
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_102_JEEP_GRAND_CHEROKEE_2019
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_158_SKODA_SUPERB_MK3
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_214_VOLKSWAGEN_TOURAN_MK2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_000_ACURA_ILX
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_159_SUBARU_ASCENT
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_047_HOLDEN_ASTRA
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_103_KIA_CARNIVAL_4TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_215_VOLKSWAGEN_TRANSPORTER_T61
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_001_ACURA_RDX
FAILED opendbc/car/hyundai/tests/test_hyundai.py::TestHyundaiFingerprint::test_feature_detection
FAILED opendbc/car/hyundai/tests/test_hyundai.py::TestHyundaiFingerprint::test_alternate_limits
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_160_SUBARU_ASCENT_2023
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_048_HONDA_ACCORD
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_216_VOLKSWAGEN_TROC_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_104_KIA_CEED
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_002_ACURA_RDX_3G
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_161_SUBARU_CROSSTREK_HYBRID
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_049_HONDA_CIVIC
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_217_MOCK
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_105_KIA_EV6
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_003_AUDI_A3_MK3
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_050_HONDA_CIVIC_2022
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_162_SUBARU_FORESTER
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_106_KIA_FORTE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_004_AUDI_Q2_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_163_SUBARU_FORESTER_2022
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_051_HONDA_CIVIC_BOSCH
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_107_KIA_K5_2021
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_005_AUDI_Q3_MK2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_164_SUBARU_FORESTER_HYBRID
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_052_HONDA_CIVIC_BOSCH_DIESEL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_108_KIA_K5_HEV_2020
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_006_BUICK_LACROSSE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_053_HONDA_CRV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_165_SUBARU_FORESTER_PREGLOBAL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_109_KIA_K8_HEV_1ST_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_007_BUICK_REGAL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_054_HONDA_CRV_5G
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_166_SUBARU_IMPREZA
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_110_KIA_NIRO_EV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_008_BYD_ATTO3
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_055_HONDA_CRV_EU
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_167_SUBARU_IMPREZA_2020
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_111_KIA_NIRO_EV_2ND_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_009_CADILLAC_ATS
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_056_HONDA_CRV_HYBRID
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_168_SUBARU_LEGACY
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_112_KIA_NIRO_HEV_2021
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_010_CADILLAC_ESCALADE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_057_HONDA_E
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_169_SUBARU_LEGACY_PREGLOBAL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_113_KIA_NIRO_HEV_2ND_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_011_CADILLAC_ESCALADE_ESV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_058_HONDA_FIT
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_170_SUBARU_OUTBACK
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_114_KIA_NIRO_PHEV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_012_CADILLAC_ESCALADE_ESV_2019
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_059_HONDA_FREED
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_171_SUBARU_OUTBACK_2023
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_115_KIA_NIRO_PHEV_2022
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_172_SUBARU_OUTBACK_PREGLOBAL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_013_CADILLAC_XT4
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_060_HONDA_HRV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_116_KIA_OPTIMA_G4
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_014_CHEVROLET_BOLT_EUV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_061_HONDA_HRV_3G
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_173_SUBARU_OUTBACK_PREGLOBAL_2018
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_117_KIA_OPTIMA_G4_FL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_015_CHEVROLET_EQUINOX
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_062_HONDA_INSIGHT
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_174_TESLA_MODEL_3
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_118_KIA_OPTIMA_H
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_016_CHEVROLET_MALIBU
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_063_HONDA_ODYSSEY
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_175_TESLA_MODEL_Y
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_119_KIA_OPTIMA_H_G4_FL
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_017_CHEVROLET_SILVERADO
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_064_HONDA_ODYSSEY_CHN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_176_TOYOTA_ALPHARD_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_120_KIA_SELTOS
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_018_CHEVROLET_TRAVERSE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_065_HONDA_PILOT
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_177_TOYOTA_AVALON
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_121_KIA_SORENTO
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_019_CHEVROLET_VOLT
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_066_HONDA_RIDGELINE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_178_TOYOTA_AVALON_2019
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_122_KIA_SORENTO_4TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_020_CHEVROLET_VOLT_2019
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_067_HYUNDAI_AZERA_6TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_179_TOYOTA_AVALON_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_123_KIA_SORENTO_HEV_4TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_021_CHRYSLER_PACIFICA_2018
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_068_HYUNDAI_AZERA_HEV_6TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_180_TOYOTA_CAMRY
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_124_KIA_SPORTAGE_5TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_022_CHRYSLER_PACIFICA_2018_HYBRID
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_069_HYUNDAI_CUSTIN_1ST_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_181_TOYOTA_CAMRY_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_125_KIA_STINGER
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_023_CHRYSLER_PACIFICA_2019_HYBRID
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_070_HYUNDAI_ELANTRA
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_182_TOYOTA_CHR
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_126_KIA_STINGER_2022
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_024_CHRYSLER_PACIFICA_2020
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_183_TOYOTA_CHR_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_071_HYUNDAI_ELANTRA_2021
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_127_LEXUS_CTH
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_025_COMMA_BODY
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_072_HYUNDAI_ELANTRA_GT_I30
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_184_TOYOTA_COROLLA
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_128_LEXUS_ES
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_026_DODGE_DURANGO
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_073_HYUNDAI_ELANTRA_HEV_2021
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_185_TOYOTA_COROLLA_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_129_LEXUS_ES_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_027_FORD_BRONCO_SPORT_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_074_HYUNDAI_GENESIS
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_186_TOYOTA_HIGHLANDER
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_130_LEXUS_GS_F
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_028_FORD_ESCAPE_MK4
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_187_TOYOTA_HIGHLANDER_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_075_HYUNDAI_IONIQ
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_131_LEXUS_IS
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_029_FORD_EXPLORER_MK6
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_076_HYUNDAI_IONIQ_5
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_188_TOYOTA_MIRAI
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_132_LEXUS_IS_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_030_FORD_FOCUS_MK4
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_077_HYUNDAI_IONIQ_6
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_189_TOYOTA_PRIUS
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_133_LEXUS_LC_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_031_FORD_F_150_LIGHTNING_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_078_HYUNDAI_IONIQ_EV_2020
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_190_TOYOTA_PRIUS_TSS2
(car_model='COMMA_BODY') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_134_LEXUS_NX
(car_model='CHRYSLER_PACIFICA_2018') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_032_FORD_F_150_MK14
(car_model='CHRYSLER_PACIFICA_2020') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_079_HYUNDAI_IONIQ_EV_LTD
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_191_TOYOTA_PRIUS_V
(car_model='CHRYSLER_PACIFICA_2018_HYBRID') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_135_LEXUS_NX_TSS2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_033_FORD_MAVERICK_MK1
(car_model='CHRYSLER_PACIFICA_2019_HYBRID') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_080_HYUNDAI_IONIQ_HEV_2022
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_192_TOYOTA_RAV4
(car_model='JEEP_GRAND_CHEROKEE') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_136_LEXUS_RC
(car_model='JEEP_GRAND_CHEROKEE_2019') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='RAM_1500_5TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_034_FORD_MUSTANG_MACH_E_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_081_HYUNDAI_IONIQ_PHEV
(car_model='RAM_HD_5TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_193_TOYOTA_RAV4H
(car_model='DODGE_DURANGO') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_137_LEXUS_RX
(car_model='FORD_BRONCO_SPORT_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_035_FORD_RANGER_MK2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_082_HYUNDAI_IONIQ_PHEV_2019
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_194_TOYOTA_RAV4_PRIME
(car_model='FORD_ESCAPE_MK4') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='FORD_EXPLORER_MK6') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_138_LEXUS_RX_TSS2
(car_model='FORD_F_150_MK14') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_036_GENESIS_G70
(car_model='FORD_F_150_LIGHTNING_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_195_TOYOTA_RAV4_TSS2
(car_model='FORD_MUSTANG_MACH_E_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_083_HYUNDAI_KONA
(car_model='FORD_FOCUS_MK4') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_139_MAZDA_3
(car_model='FORD_MAVERICK_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_037_GENESIS_G70_2020
(car_model='FORD_RANGER_MK2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_084_HYUNDAI_KONA_EV
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_196_TOYOTA_RAV4_TSS2_2022
(car_model='HONDA_ACCORD') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_140_MAZDA_6
(car_model='HONDA_CIVIC') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_038_GENESIS_G80
(car_model='HONDA_CIVIC_BOSCH') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_197_TOYOTA_RAV4_TSS2_2023
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_085_HYUNDAI_KONA_EV_2022
(car_model='HONDA_CIVIC_BOSCH_DIESEL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_141_MAZDA_CX5
(car_model='HONDA_CRV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_039_GENESIS_G80_2ND_GEN_FL
(car_model='HONDA_CRV_5G') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_198_TOYOTA_SIENNA
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_086_HYUNDAI_KONA_EV_2ND_GEN
(car_model='HONDA_CRV_EU') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_142_MAZDA_CX5_2022
(car_model='HONDA_CRV_HYBRID') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_040_GENESIS_G90
(car_model='HONDA_FIT') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_199_TOYOTA_SIENNA_4TH_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_087_HYUNDAI_KONA_HEV
(car_model='HONDA_FREED') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_143_MAZDA_CX9
(car_model='HONDA_ODYSSEY') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HONDA_ODYSSEY_CHN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_041_GENESIS_GV60_EV_1ST_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_200_VOLKSWAGEN_ARTEON_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_088_HYUNDAI_PALISADE
(car_model='HONDA_PILOT') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_144_MAZDA_CX9_2021
(car_model='ACURA_RDX') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='ACURA_RDX_3G') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_042_GENESIS_GV70_1ST_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_089_HYUNDAI_SANTA_CRUZ_1ST_GEN
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_201_VOLKSWAGEN_ATLAS_MK1
(car_model='HONDA_RIDGELINE') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_145_NISSAN_ALTIMA
(car_model='HONDA_INSIGHT') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_043_GENESIS_GV70_ELECTRIFIED_1ST_GEN
(car_model='HONDA_HRV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_090_HYUNDAI_SANTA_FE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_202_VOLKSWAGEN_CADDY_MK3
(car_model='HONDA_HRV_3G') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_146_NISSAN_LEAF
(car_model='ACURA_ILX') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HONDA_E') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_044_GENESIS_GV80
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_091_HYUNDAI_SANTA_FE_2022
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_203_VOLKSWAGEN_CRAFTER_MK2
(car_model='HONDA_CIVIC_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_147_NISSAN_LEAF_IC
(car_model='HYUNDAI_AZERA_6TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_AZERA_HEV_6TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_045_GMC_ACADIA
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_204_VOLKSWAGEN_GOLF_MK7
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_092_HYUNDAI_SANTA_FE_HEV_2022
(car_model='HYUNDAI_GENESIS') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_IONIQ') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_148_NISSAN_ROGUE
(car_model='HYUNDAI_IONIQ_PHEV_2019') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_205_VOLKSWAGEN_JETTA_MK6
(car_model='HYUNDAI_IONIQ_PHEV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_093_HYUNDAI_SANTA_FE_PHEV_2022
(car_model='HYUNDAI_IONIQ_EV_2020') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_149_NISSAN_XTRAIL
(car_model='HYUNDAI_IONIQ_EV_LTD') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_206_VOLKSWAGEN_JETTA_MK7
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_094_HYUNDAI_SONATA
(car_model='HYUNDAI_IONIQ_HEV_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_150_RAM_1500_5TH_GEN
(car_model='HYUNDAI_SONATA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_SONATA_LF') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_TUCSON') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_095_HYUNDAI_SONATA_HYBRID
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_207_VOLKSWAGEN_PASSAT_MK8
(car_model='HYUNDAI_SANTA_FE') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_151_RAM_HD_5TH_GEN
(car_model='HYUNDAI_SANTA_FE_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_SANTA_FE_HEV_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_208_VOLKSWAGEN_PASSAT_NMS
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_096_HYUNDAI_SONATA_LF
(car_model='HYUNDAI_SANTA_FE_PHEV_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_152_SEAT_ATECA_MK1
(car_model='HYUNDAI_CUSTIN_1ST_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_STINGER') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_209_VOLKSWAGEN_POLO_MK6
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_097_HYUNDAI_STARIA_4TH_GEN
(car_model='KIA_STINGER_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_153_SKODA_FABIA_MK4
(car_model='HYUNDAI_PALISADE') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_VELOSTER') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_210_VOLKSWAGEN_SHARAN_MK2
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_098_HYUNDAI_TUCSON
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_154_SKODA_KAMIQ_MK1
(car_model='GENESIS_G70') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='GENESIS_G70_2020') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='GENESIS_G80') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_211_VOLKSWAGEN_TAOS_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_099_HYUNDAI_TUCSON_4TH_GEN
(car_model='GENESIS_G80_2ND_GEN_FL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_155_SKODA_KAROQ_MK1
(car_model='GENESIS_G90') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_KONA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_212_VOLKSWAGEN_TCROSS_MK1
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_100_HYUNDAI_VELOSTER
(car_model='KIA_CEED') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_156_SKODA_KODIAQ_MK1
(car_model='KIA_FORTE') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_K5_2021') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_213_VOLKSWAGEN_TIGUAN_MK2
(car_model='KIA_K5_HEV_2020') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_101_JEEP_GRAND_CHEROKEE
FAILED opendbc/car/tests/test_car_interfaces.py::TestCarInterfaces::test_car_interfaces_157_SKODA_OCTAVIA_MK3
(car_model='HYUNDAI_KONA_EV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_KONA_EV_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_KONA_EV_2ND_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_NIRO_EV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_NIRO_EV_2ND_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_NIRO_PHEV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_NIRO_PHEV_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_NIRO_HEV_2021') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_SELTOS') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_OPTIMA_G4') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_OPTIMA_G4_FL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_OPTIMA_H') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_OPTIMA_H_G4_FL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_ELANTRA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_ELANTRA_GT_I30') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_ELANTRA_2021') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_ELANTRA_HEV_2021') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_KONA_HEV') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_SONATA_HYBRID') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_SORENTO') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_EV6') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_IONIQ_5') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_IONIQ_6') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_TUCSON_4TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_SANTA_CRUZ_1ST_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_SPORTAGE_5TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='GENESIS_GV70_1ST_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='GENESIS_GV70_ELECTRIFIED_1ST_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='GENESIS_GV60_EV_1ST_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_SORENTO_4TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_SORENTO_HEV_4TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_NIRO_HEV_2ND_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='GENESIS_GV80') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_CARNIVAL_4TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='KIA_K8_HEV_1ST_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='HYUNDAI_STARIA_4TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='MAZDA_CX5_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='MAZDA_CX5') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='MAZDA_CX9') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='MAZDA_3') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='MAZDA_6') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='MAZDA_CX9_2021') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='NISSAN_ALTIMA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='NISSAN_LEAF') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='NISSAN_LEAF_IC') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='NISSAN_XTRAIL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_ASCENT') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_ASCENT_2023') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_LEGACY') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_IMPREZA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_IMPREZA_2020') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_CROSSTREK_HYBRID') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_FORESTER') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_FORESTER_HYBRID') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_FORESTER_PREGLOBAL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_LEGACY_PREGLOBAL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_OUTBACK_PREGLOBAL') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_OUTBACK_PREGLOBAL_2018') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_OUTBACK') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_FORESTER_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SUBARU_OUTBACK_2023') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TESLA_MODEL_3') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TESLA_MODEL_Y') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_AVALON') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_AVALON_2019') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_AVALON_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_CAMRY') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_CAMRY_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_CHR') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_CHR_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_COROLLA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_COROLLA_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_HIGHLANDER') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_HIGHLANDER_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_IS') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_IS_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_PRIUS') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_PRIUS_V') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_RAV4') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_RAV4H') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_RAV4_PRIME') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_RAV4_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_RAV4_TSS2_2022') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_RAV4_TSS2_2023') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_SIENNA') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_SIENNA_4TH_GEN') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_CTH') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_ES_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_ES') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_GS_F') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_NX') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_NX_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_LC_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_RC') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_RX') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='LEXUS_RX_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_PRIUS_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_MIRAI') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='TOYOTA_ALPHARD_TSS2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_ARTEON_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_ATLAS_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_CADDY_MK3') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_CRAFTER_MK2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_GOLF_MK7') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_JETTA_MK6') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_JETTA_MK7') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_PASSAT_MK8') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_PASSAT_NMS') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_POLO_MK6') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_SHARAN_MK2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_TAOS_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_TCROSS_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_TIGUAN_MK2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_TOURAN_MK2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_TRANSPORTER_T61') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='VOLKSWAGEN_TROC_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='AUDI_A3_MK3') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='AUDI_Q2_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='AUDI_Q3_MK2') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SEAT_ATECA_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SKODA_FABIA_MK4') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SKODA_KAMIQ_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SKODA_KAROQ_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SKODA_KODIAQ_MK1') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SKODA_OCTAVIA_MK3') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
(car_model='SKODA_SUPERB_MK3') SUBFAIL opendbc/car/tests/test_fw_fingerprint.py::TestFwFingerprint::test_blacklisted_ecus
ERROR opendbc/car/tests/test_docs.py::TestCarDocs::test_duplicate_years - tom...
ERROR opendbc/car/tests/test_docs.py::TestCarDocs::test_missing_car_docs - to...
ERROR opendbc/car/tests/test_docs.py::TestCarDocs::test_naming_conventions - ...
ERROR opendbc/car/tests/test_docs.py::TestCarDocs::test_torque_star - tomllib...
ERROR opendbc/car/tests/test_docs.py::TestCarDocs::test_year_format - tomllib...
ERROR opendbc/car/tests/test_docs.py::TestCarDocs::test_harnesses - tomllib.T...
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_1_ACURA_RDX::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_1_ACURA_RDX::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_2_ACURA_RDX_3G::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_2_ACURA_RDX_3G::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_22_CHRYSLER_PACIFICA_2018_HYBRID::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_3_AUDI_A3_MK3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_23_CHRYSLER_PACIFICA_2019_HYBRID::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_3_AUDI_A3_MK3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_12_CADILLAC_ESCALADE_ESV_2019::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_23_CHRYSLER_PACIFICA_2019_HYBRID::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_4_AUDI_Q2_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_12_CADILLAC_ESCALADE_ESV_2019::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_24_CHRYSLER_PACIFICA_2020::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_4_AUDI_Q2_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_13_CADILLAC_XT4::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_24_CHRYSLER_PACIFICA_2020::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_13_CADILLAC_XT4::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_5_AUDI_Q3_MK2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_25_COMMA_BODY::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_14_CHEVROLET_BOLT_EUV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_5_AUDI_Q3_MK2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_25_COMMA_BODY::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_14_CHEVROLET_BOLT_EUV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_6_BUICK_LACROSSE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_26_DODGE_DURANGO::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_6_BUICK_LACROSSE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_26_DODGE_DURANGO::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_15_CHEVROLET_EQUINOX::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_7_BUICK_REGAL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_27_FORD_BRONCO_SPORT_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_15_CHEVROLET_EQUINOX::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_7_BUICK_REGAL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_27_FORD_BRONCO_SPORT_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_8_BYD_ATTO3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_16_CHEVROLET_MALIBU::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_28_FORD_ESCAPE_MK4::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_8_BYD_ATTO3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_16_CHEVROLET_MALIBU::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_28_FORD_ESCAPE_MK4::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_9_CADILLAC_ATS::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_17_CHEVROLET_SILVERADO::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_29_FORD_EXPLORER_MK6::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_9_CADILLAC_ATS::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_17_CHEVROLET_SILVERADO::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_29_FORD_EXPLORER_MK6::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_10_CADILLAC_ESCALADE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_18_CHEVROLET_TRAVERSE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_30_FORD_FOCUS_MK4::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_10_CADILLAC_ESCALADE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_18_CHEVROLET_TRAVERSE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_30_FORD_FOCUS_MK4::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_11_CADILLAC_ESCALADE_ESV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_19_CHEVROLET_VOLT::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_31_FORD_F_150_LIGHTNING_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_11_CADILLAC_ESCALADE_ESV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_19_CHEVROLET_VOLT::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_31_FORD_F_150_LIGHTNING_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_42_GENESIS_GV70_1ST_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_20_CHEVROLET_VOLT_2019::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_32_FORD_F_150_MK14::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_43_GENESIS_GV70_ELECTRIFIED_1ST_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_20_CHEVROLET_VOLT_2019::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_52_HONDA_CIVIC_BOSCH_DIESEL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_43_GENESIS_GV70_ELECTRIFIED_1ST_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_21_CHRYSLER_PACIFICA_2018::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_52_HONDA_CIVIC_BOSCH_DIESEL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_21_CHRYSLER_PACIFICA_2018::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_44_GENESIS_GV80::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_53_HONDA_CRV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_44_GENESIS_GV80::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_22_CHRYSLER_PACIFICA_2018_HYBRID::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_53_HONDA_CRV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_45_GMC_ACADIA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_61_HONDA_HRV_3G::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_54_HONDA_CRV_5G::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_45_GMC_ACADIA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_62_HONDA_INSIGHT::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_54_HONDA_CRV_5G::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_46_GMC_YUKON::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_62_HONDA_INSIGHT::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_55_HONDA_CRV_EU::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_46_GMC_YUKON::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_63_HONDA_ODYSSEY::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_55_HONDA_CRV_EU::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_47_HOLDEN_ASTRA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_63_HONDA_ODYSSEY::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_56_HONDA_CRV_HYBRID::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_47_HOLDEN_ASTRA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_56_HONDA_CRV_HYBRID::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_64_HONDA_ODYSSEY_CHN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_48_HONDA_ACCORD::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_64_HONDA_ODYSSEY_CHN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_57_HONDA_E::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_48_HONDA_ACCORD::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_57_HONDA_E::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_65_HONDA_PILOT::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_49_HONDA_CIVIC::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_65_HONDA_PILOT::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_58_HONDA_FIT::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_49_HONDA_CIVIC::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_66_HONDA_RIDGELINE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_58_HONDA_FIT::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_50_HONDA_CIVIC_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_66_HONDA_RIDGELINE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_59_HONDA_FREED::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_50_HONDA_CIVIC_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_59_HONDA_FREED::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_67_HYUNDAI_AZERA_6TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_51_HONDA_CIVIC_BOSCH::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_60_HONDA_HRV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_67_HYUNDAI_AZERA_6TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_51_HONDA_CIVIC_BOSCH::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_60_HONDA_HRV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_68_HYUNDAI_AZERA_HEV_6TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_70_HYUNDAI_ELANTRA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_61_HONDA_HRV_3G::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_68_HYUNDAI_AZERA_HEV_6TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_71_HYUNDAI_ELANTRA_2021::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_79_HYUNDAI_IONIQ_EV_LTD::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_69_HYUNDAI_CUSTIN_1ST_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_71_HYUNDAI_ELANTRA_2021::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_79_HYUNDAI_IONIQ_EV_LTD::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_69_HYUNDAI_CUSTIN_1ST_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_72_HYUNDAI_ELANTRA_GT_I30::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_70_HYUNDAI_ELANTRA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_72_HYUNDAI_ELANTRA_GT_I30::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_80_HYUNDAI_IONIQ_HEV_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_87_HYUNDAI_KONA_HEV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_73_HYUNDAI_ELANTRA_HEV_2021::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_80_HYUNDAI_IONIQ_HEV_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_88_HYUNDAI_PALISADE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_73_HYUNDAI_ELANTRA_HEV_2021::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_81_HYUNDAI_IONIQ_PHEV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_88_HYUNDAI_PALISADE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_81_HYUNDAI_IONIQ_PHEV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_74_HYUNDAI_GENESIS::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_74_HYUNDAI_GENESIS::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_89_HYUNDAI_SANTA_CRUZ_1ST_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_82_HYUNDAI_IONIQ_PHEV_2019::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_89_HYUNDAI_SANTA_CRUZ_1ST_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_75_HYUNDAI_IONIQ::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_82_HYUNDAI_IONIQ_PHEV_2019::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_90_HYUNDAI_SANTA_FE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_75_HYUNDAI_IONIQ::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_83_HYUNDAI_KONA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_90_HYUNDAI_SANTA_FE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_76_HYUNDAI_IONIQ_5::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_83_HYUNDAI_KONA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_91_HYUNDAI_SANTA_FE_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_84_HYUNDAI_KONA_EV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_76_HYUNDAI_IONIQ_5::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_91_HYUNDAI_SANTA_FE_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_84_HYUNDAI_KONA_EV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_77_HYUNDAI_IONIQ_6::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_92_HYUNDAI_SANTA_FE_HEV_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_85_HYUNDAI_KONA_EV_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_77_HYUNDAI_IONIQ_6::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_92_HYUNDAI_SANTA_FE_HEV_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_85_HYUNDAI_KONA_EV_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_78_HYUNDAI_IONIQ_EV_2020::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_93_HYUNDAI_SANTA_FE_PHEV_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_86_HYUNDAI_KONA_EV_2ND_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_78_HYUNDAI_IONIQ_EV_2020::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_86_HYUNDAI_KONA_EV_2ND_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_93_HYUNDAI_SANTA_FE_PHEV_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_95_HYUNDAI_SONATA_HYBRID::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_87_HYUNDAI_KONA_HEV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_94_HYUNDAI_SONATA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_96_HYUNDAI_SONATA_LF::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_94_HYUNDAI_SONATA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_103_KIA_CARNIVAL_4TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_96_HYUNDAI_SONATA_LF::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_95_HYUNDAI_SONATA_HYBRID::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_104_KIA_CEED::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_97_HYUNDAI_STARIA_4TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_104_KIA_CEED::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_111_KIA_NIRO_EV_2ND_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_97_HYUNDAI_STARIA_4TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_111_KIA_NIRO_EV_2ND_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_105_KIA_EV6::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_98_HYUNDAI_TUCSON::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_105_KIA_EV6::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_112_KIA_NIRO_HEV_2021::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_98_HYUNDAI_TUCSON::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_112_KIA_NIRO_HEV_2021::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_106_KIA_FORTE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_99_HYUNDAI_TUCSON_4TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_113_KIA_NIRO_HEV_2ND_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_106_KIA_FORTE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_99_HYUNDAI_TUCSON_4TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_113_KIA_NIRO_HEV_2ND_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_107_KIA_K5_2021::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_100_HYUNDAI_VELOSTER::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_114_KIA_NIRO_PHEV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_107_KIA_K5_2021::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_100_HYUNDAI_VELOSTER::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_114_KIA_NIRO_PHEV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_108_KIA_K5_HEV_2020::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_101_JEEP_GRAND_CHEROKEE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_115_KIA_NIRO_PHEV_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_108_KIA_K5_HEV_2020::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_101_JEEP_GRAND_CHEROKEE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_115_KIA_NIRO_PHEV_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_109_KIA_K8_HEV_1ST_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_102_JEEP_GRAND_CHEROKEE_2019::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_116_KIA_OPTIMA_G4::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_109_KIA_K8_HEV_1ST_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_102_JEEP_GRAND_CHEROKEE_2019::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_116_KIA_OPTIMA_G4::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_110_KIA_NIRO_EV::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_103_KIA_CARNIVAL_4TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_117_KIA_OPTIMA_G4_FL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_110_KIA_NIRO_EV::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_118_KIA_OPTIMA_H::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_117_KIA_OPTIMA_G4_FL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_125_KIA_STINGER::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_119_KIA_OPTIMA_H_G4_FL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_118_KIA_OPTIMA_H::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_126_KIA_STINGER_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_119_KIA_OPTIMA_H_G4_FL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_132_LEXUS_IS_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_126_KIA_STINGER_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_120_KIA_SELTOS::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_133_LEXUS_LC_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_120_KIA_SELTOS::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_127_LEXUS_CTH::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_133_LEXUS_LC_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_121_KIA_SORENTO::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_127_LEXUS_CTH::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_134_LEXUS_NX::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_121_KIA_SORENTO::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_128_LEXUS_ES::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_134_LEXUS_NX::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_122_KIA_SORENTO_4TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_128_LEXUS_ES::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_135_LEXUS_NX_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_122_KIA_SORENTO_4TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_129_LEXUS_ES_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_135_LEXUS_NX_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_123_KIA_SORENTO_HEV_4TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_152_SEAT_ATECA_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_129_LEXUS_ES_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_136_LEXUS_RC::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_123_KIA_SORENTO_HEV_4TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_130_LEXUS_GS_F::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_153_SKODA_FABIA_MK4::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_136_LEXUS_RC::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_124_KIA_SPORTAGE_5TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_130_LEXUS_GS_F::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_153_SKODA_FABIA_MK4::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_137_LEXUS_RX::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_124_KIA_SPORTAGE_5TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_131_LEXUS_IS::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_154_SKODA_KAMIQ_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_137_LEXUS_RX::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_125_KIA_STINGER::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_131_LEXUS_IS::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_154_SKODA_KAMIQ_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_138_LEXUS_RX_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_139_MAZDA_3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_132_LEXUS_IS_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_155_SKODA_KAROQ_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_138_LEXUS_RX_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_140_MAZDA_6::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_155_SKODA_KAROQ_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_139_MAZDA_3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_140_MAZDA_6::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_146_NISSAN_LEAF::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_156_SKODA_KODIAQ_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_163_SUBARU_FORESTER_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_141_MAZDA_CX5::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_146_NISSAN_LEAF::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_156_SKODA_KODIAQ_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_163_SUBARU_FORESTER_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_141_MAZDA_CX5::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_147_NISSAN_LEAF_IC::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_157_SKODA_OCTAVIA_MK3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_164_SUBARU_FORESTER_HYBRID::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_142_MAZDA_CX5_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_147_NISSAN_LEAF_IC::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_157_SKODA_OCTAVIA_MK3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_164_SUBARU_FORESTER_HYBRID::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_142_MAZDA_CX5_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_148_NISSAN_ROGUE::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_165_SUBARU_FORESTER_PREGLOBAL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_143_MAZDA_CX9::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_148_NISSAN_ROGUE::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_158_SKODA_SUPERB_MK3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_165_SUBARU_FORESTER_PREGLOBAL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_143_MAZDA_CX9::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_158_SKODA_SUPERB_MK3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_149_NISSAN_XTRAIL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_166_SUBARU_IMPREZA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_144_MAZDA_CX9_2021::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_159_SUBARU_ASCENT::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_149_NISSAN_XTRAIL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_166_SUBARU_IMPREZA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_144_MAZDA_CX9_2021::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_159_SUBARU_ASCENT::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_150_RAM_1500_5TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_167_SUBARU_IMPREZA_2020::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_145_NISSAN_ALTIMA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_160_SUBARU_ASCENT_2023::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_150_RAM_1500_5TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_167_SUBARU_IMPREZA_2020::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_145_NISSAN_ALTIMA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_160_SUBARU_ASCENT_2023::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_151_RAM_HD_5TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_168_SUBARU_LEGACY::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_169_SUBARU_LEGACY_PREGLOBAL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_161_SUBARU_CROSSTREK_HYBRID::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_151_RAM_HD_5TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_168_SUBARU_LEGACY::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_169_SUBARU_LEGACY_PREGLOBAL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_161_SUBARU_CROSSTREK_HYBRID::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_152_SEAT_ATECA_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_174_TESLA_MODEL_3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_170_SUBARU_OUTBACK::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_180_TOYOTA_CAMRY::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_175_TESLA_MODEL_Y::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_170_SUBARU_OUTBACK::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_162_SUBARU_FORESTER::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_162_SUBARU_FORESTER::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_180_TOYOTA_CAMRY::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_175_TESLA_MODEL_Y::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_171_SUBARU_OUTBACK_2023::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_185_TOYOTA_COROLLA_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_181_TOYOTA_CAMRY_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_176_TOYOTA_ALPHARD_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_171_SUBARU_OUTBACK_2023::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_186_TOYOTA_HIGHLANDER::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_176_TOYOTA_ALPHARD_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_181_TOYOTA_CAMRY_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_172_SUBARU_OUTBACK_PREGLOBAL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_186_TOYOTA_HIGHLANDER::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_177_TOYOTA_AVALON::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_182_TOYOTA_CHR::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_172_SUBARU_OUTBACK_PREGLOBAL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_187_TOYOTA_HIGHLANDER_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_177_TOYOTA_AVALON::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_182_TOYOTA_CHR::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_173_SUBARU_OUTBACK_PREGLOBAL_2018::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_187_TOYOTA_HIGHLANDER_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_178_TOYOTA_AVALON_2019::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_183_TOYOTA_CHR_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_173_SUBARU_OUTBACK_PREGLOBAL_2018::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_183_TOYOTA_CHR_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_188_TOYOTA_MIRAI::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_174_TESLA_MODEL_3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_178_TOYOTA_AVALON_2019::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_188_TOYOTA_MIRAI::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_179_TOYOTA_AVALON_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_184_TOYOTA_COROLLA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_190_TOYOTA_PRIUS_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_189_TOYOTA_PRIUS::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_179_TOYOTA_AVALON_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_184_TOYOTA_COROLLA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_191_TOYOTA_PRIUS_V::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_209_VOLKSWAGEN_POLO_MK6::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_195_TOYOTA_RAV4_TSS2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_189_TOYOTA_PRIUS::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_216_VOLKSWAGEN_TROC_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_185_TOYOTA_COROLLA_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_191_TOYOTA_PRIUS_V::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_210_VOLKSWAGEN_SHARAN_MK2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_196_TOYOTA_RAV4_TSS2_2022::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_190_TOYOTA_PRIUS_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_200_VOLKSWAGEN_ARTEON_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_192_TOYOTA_RAV4::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_210_VOLKSWAGEN_SHARAN_MK2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_196_TOYOTA_RAV4_TSS2_2022::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_201_VOLKSWAGEN_ATLAS_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_205_VOLKSWAGEN_JETTA_MK6::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_192_TOYOTA_RAV4::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_211_VOLKSWAGEN_TAOS_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_197_TOYOTA_RAV4_TSS2_2023::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_205_VOLKSWAGEN_JETTA_MK6::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_201_VOLKSWAGEN_ATLAS_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_211_VOLKSWAGEN_TAOS_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_197_TOYOTA_RAV4_TSS2_2023::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_193_TOYOTA_RAV4H::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_206_VOLKSWAGEN_JETTA_MK7::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_202_VOLKSWAGEN_CADDY_MK3::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_212_VOLKSWAGEN_TCROSS_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_198_TOYOTA_SIENNA::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_193_TOYOTA_RAV4H::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_206_VOLKSWAGEN_JETTA_MK7::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_202_VOLKSWAGEN_CADDY_MK3::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_212_VOLKSWAGEN_TCROSS_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_198_TOYOTA_SIENNA::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_194_TOYOTA_RAV4_PRIME::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_203_VOLKSWAGEN_CRAFTER_MK2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_207_VOLKSWAGEN_PASSAT_MK8::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_213_VOLKSWAGEN_TIGUAN_MK2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_199_TOYOTA_SIENNA_4TH_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_194_TOYOTA_RAV4_PRIME::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_207_VOLKSWAGEN_PASSAT_MK8::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_203_VOLKSWAGEN_CRAFTER_MK2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_213_VOLKSWAGEN_TIGUAN_MK2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_195_TOYOTA_RAV4_TSS2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_208_VOLKSWAGEN_PASSAT_NMS::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_199_TOYOTA_SIENNA_4TH_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_204_VOLKSWAGEN_GOLF_MK7::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_214_VOLKSWAGEN_TOURAN_MK2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_200_VOLKSWAGEN_ARTEON_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_204_VOLKSWAGEN_GOLF_MK7::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_214_VOLKSWAGEN_TOURAN_MK2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_208_VOLKSWAGEN_PASSAT_NMS::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_209_VOLKSWAGEN_POLO_MK6::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_215_VOLKSWAGEN_TRANSPORTER_T61::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_215_VOLKSWAGEN_TRANSPORTER_T61::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_216_VOLKSWAGEN_TROC_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_0_ACURA_ILX::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_0_ACURA_ILX::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_32_FORD_F_150_MK14::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_33_FORD_MAVERICK_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_33_FORD_MAVERICK_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_34_FORD_MUSTANG_MACH_E_MK1::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_34_FORD_MUSTANG_MACH_E_MK1::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_35_FORD_RANGER_MK2::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_35_FORD_RANGER_MK2::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_36_GENESIS_G70::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_36_GENESIS_G70::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_37_GENESIS_G70_2020::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_37_GENESIS_G70_2020::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_38_GENESIS_G80::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_38_GENESIS_G80::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_39_GENESIS_G80_2ND_GEN_FL::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_39_GENESIS_G80_2ND_GEN_FL::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_40_GENESIS_G90::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_40_GENESIS_G90::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_41_GENESIS_GV60_EV_1ST_GEN::test_jerk_limits
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_41_GENESIS_GV60_EV_1ST_GEN::test_max_lateral_accel
ERROR opendbc/car/tests/test_lateral_limits.py::TestLateralLimits_42_GENESIS_GV70_1ST_GEN::test_jerk_limits
= 418 failed, 1048 passed, 113 skipped, 440 errors, 2742 subtests passed in 25.96s =
